// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_encrypt_MixColumn_AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        nb,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_state6 = 7'd8;
parameter    ap_ST_fsm_pp1_stage0 = 7'd16;
parameter    ap_ST_fsm_pp1_stage1 = 7'd32;
parameter    ap_ST_fsm_state10 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [7:0] statemt_d0;
input  [7:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [7:0] statemt_d1;
input  [7:0] statemt_q1;
input  [3:0] nb;
input  [3:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [7:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [7:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] j_reg_261;
reg   [3:0] j_5_reg_272;
wire   [6:0] mul54_fu_291_p2;
reg   [6:0] mul54_reg_783;
wire   [3:0] j_4_fu_297_p2;
reg   [3:0] j_4_reg_788;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln228_fu_303_p2;
reg   [0:0] icmp_ln228_reg_793;
reg   [0:0] icmp_ln228_reg_793_pp0_iter1_reg;
wire   [4:0] shl_ln_fu_316_p3;
reg   [4:0] shl_ln_reg_797;
wire   [63:0] zext_ln231_fu_324_p1;
reg   [63:0] zext_ln231_reg_803;
wire   [63:0] zext_ln235_fu_335_p1;
reg   [63:0] zext_ln235_reg_813;
wire   [6:0] add_ln242_fu_340_p2;
reg   [6:0] add_ln242_reg_823;
reg   [7:0] x_6_reg_838;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] x_reg_848;
wire   [63:0] zext_ln242_fu_370_p1;
reg   [63:0] zext_ln242_reg_858;
wire   [63:0] zext_ln242_1_fu_380_p1;
reg   [63:0] zext_ln242_1_reg_868;
reg   [7:0] word_load_reg_888;
reg   [7:0] word_load_8_reg_893;
wire   [7:0] xor_ln266_2_fu_641_p2;
reg   [7:0] xor_ln266_2_reg_898;
wire   [7:0] xor_ln278_fu_712_p2;
reg   [7:0] xor_ln278_reg_903;
wire   [3:0] j_6_fu_718_p2;
reg   [3:0] j_6_reg_908;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln281_fu_724_p2;
reg   [0:0] icmp_ln281_reg_913;
wire   [4:0] shl_ln8_fu_733_p3;
reg   [4:0] shl_ln8_reg_917;
wire   [63:0] zext_ln282_fu_741_p1;
reg   [63:0] zext_ln282_reg_923;
wire   [63:0] zext_ln283_fu_752_p1;
reg   [63:0] zext_ln283_reg_933;
wire   [63:0] zext_ln284_fu_762_p1;
reg   [63:0] zext_ln284_reg_943;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [63:0] zext_ln285_fu_772_p1;
reg   [63:0] zext_ln285_reg_953;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
reg   [4:0] ret_address0;
reg    ret_ce0;
reg    ret_we0;
reg   [7:0] ret_d0;
wire   [7:0] ret_q0;
reg   [4:0] ret_address1;
reg    ret_ce1;
reg    ret_we1;
reg   [7:0] ret_d1;
wire   [7:0] ret_q1;
reg   [3:0] ap_phi_mux_j_phi_fu_265_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_j_5_phi_fu_276_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln242_2_fu_345_p1;
wire   [63:0] zext_ln254_fu_360_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln266_fu_394_p1;
wire   [63:0] zext_ln279_fu_405_p1;
wire    ap_block_pp1_stage1;
wire   [7:0] xor_ln242_2_fu_484_p2;
wire   [7:0] xor_ln254_2_fu_562_p2;
wire   [3:0] mul54_fu_291_p0;
wire   [3:0] mul54_fu_291_p1;
wire   [2:0] trunc_ln231_fu_312_p1;
wire   [4:0] or_ln235_fu_329_p2;
wire   [6:0] zext_ln228_fu_308_p1;
wire   [7:0] zext_ln242_4_fu_350_p1;
wire   [7:0] add_ln254_fu_354_p2;
wire   [4:0] or_ln242_fu_365_p2;
wire   [4:0] or_ln242_1_fu_375_p2;
wire   [8:0] zext_ln242_3_fu_385_p1;
wire   [8:0] add_ln266_fu_388_p2;
wire   [8:0] add_ln279_fu_399_p2;
wire   [7:0] shl_ln231_fu_410_p2;
wire   [0:0] tmp_fu_415_p3;
wire   [7:0] xor_ln233_fu_422_p2;
wire   [7:0] shl_ln236_fu_436_p2;
wire   [7:0] xor_ln219_fu_441_p2;
wire   [0:0] tmp_4_fu_446_p3;
wire   [7:0] xor_ln238_fu_453_p2;
wire   [7:0] xor_ln242_fu_467_p2;
wire   [7:0] select_ln232_fu_428_p3;
wire   [7:0] xor_ln242_1_fu_472_p2;
wire   [7:0] xor_ln242_3_fu_478_p2;
wire   [7:0] x_1_fu_459_p3;
wire   [0:0] tmp_5_fu_491_p3;
wire   [7:0] xor_ln247_fu_498_p2;
wire   [7:0] shl_ln249_fu_512_p2;
wire   [7:0] xor_ln219_1_fu_518_p2;
wire   [0:0] tmp_6_fu_524_p3;
wire   [7:0] xor_ln251_fu_532_p2;
wire   [7:0] xor_ln254_fu_546_p2;
wire   [7:0] select_ln246_fu_504_p3;
wire   [7:0] xor_ln254_1_fu_550_p2;
wire   [7:0] xor_ln254_3_fu_556_p2;
wire   [7:0] x_3_fu_538_p3;
wire   [0:0] tmp_7_fu_569_p3;
wire   [7:0] xor_ln259_fu_577_p2;
wire   [7:0] shl_ln261_fu_591_p2;
wire   [7:0] xor_ln219_2_fu_597_p2;
wire   [0:0] tmp_8_fu_603_p3;
wire   [7:0] xor_ln263_fu_611_p2;
wire   [7:0] xor_ln266_fu_625_p2;
wire   [7:0] select_ln258_fu_583_p3;
wire   [7:0] xor_ln266_1_fu_630_p2;
wire   [7:0] xor_ln266_3_fu_635_p2;
wire   [7:0] x_5_fu_617_p3;
wire   [0:0] tmp_9_fu_647_p3;
wire   [7:0] xor_ln271_fu_655_p2;
wire   [7:0] xor_ln219_3_fu_669_p2;
wire   [0:0] tmp_10_fu_674_p3;
wire   [7:0] xor_ln275_fu_681_p2;
wire   [7:0] xor_ln279_fu_695_p2;
wire   [7:0] x_7_fu_687_p3;
wire   [7:0] xor_ln279_1_fu_700_p2;
wire   [7:0] xor_ln278_1_fu_706_p2;
wire   [7:0] select_ln270_fu_661_p3;
wire   [2:0] trunc_ln282_fu_729_p1;
wire   [4:0] or_ln283_fu_746_p2;
wire   [4:0] or_ln284_fu_757_p2;
wire   [4:0] or_ln285_fu_767_p2;
wire    ap_CS_fsm_state10;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [6:0] mul54_fu_291_p00;
wire   [6:0] mul54_fu_291_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

aes_encrypt_MixColumn_AddRoundKey_ret #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ret_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ret_address0),
    .ce0(ret_ce0),
    .we0(ret_we0),
    .d0(ret_d0),
    .q0(ret_q0),
    .address1(ret_address1),
    .ce1(ret_ce1),
    .we1(ret_we1),
    .d1(ret_d1),
    .q1(ret_q1)
);

aes_encrypt_mul_4ns_4ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 7 ))
mul_4ns_4ns_7_1_1_U14(
    .din0(mul54_fu_291_p0),
    .din1(mul54_fu_291_p1),
    .dout(mul54_fu_291_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_5_reg_272 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln281_reg_913 == 1'd0))) begin
        j_5_reg_272 <= j_6_reg_908;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_261 <= 4'd0;
    end else if (((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_261 <= j_4_reg_788;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_303_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln242_reg_823 <= add_ln242_fu_340_p2;
        shl_ln_reg_797[4 : 2] <= shl_ln_fu_316_p3[4 : 2];
        zext_ln231_reg_803[4 : 2] <= zext_ln231_fu_324_p1[4 : 2];
        zext_ln235_reg_813[4 : 2] <= zext_ln235_fu_335_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln228_reg_793 <= icmp_ln228_fu_303_p2;
        icmp_ln228_reg_793_pp0_iter1_reg <= icmp_ln228_reg_793;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln281_reg_913 <= icmp_ln281_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_4_reg_788 <= j_4_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_6_reg_908 <= j_6_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul54_reg_783 <= mul54_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln281_fu_724_p2 == 1'd0))) begin
        shl_ln8_reg_917[4 : 2] <= shl_ln8_fu_733_p3[4 : 2];
        zext_ln282_reg_923[4 : 2] <= zext_ln282_fu_741_p1[4 : 2];
        zext_ln283_reg_933[4 : 2] <= zext_ln283_fu_752_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        word_load_8_reg_893 <= word_q0;
        word_load_reg_888 <= word_q1;
        x_6_reg_838 <= statemt_q1;
        x_reg_848 <= statemt_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xor_ln266_2_reg_898 <= xor_ln266_2_fu_641_p2;
        xor_ln278_reg_903 <= xor_ln278_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln242_1_reg_868[4 : 2] <= zext_ln242_1_fu_380_p1[4 : 2];
        zext_ln242_reg_858[4 : 2] <= zext_ln242_fu_370_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln281_reg_913 == 1'd0))) begin
        zext_ln284_reg_943[4 : 2] <= zext_ln284_fu_762_p1[4 : 2];
        zext_ln285_reg_953[4 : 2] <= zext_ln285_fu_772_p1[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln228_fu_303_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln281_fu_724_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln281_reg_913 == 1'd0))) begin
        ap_phi_mux_j_5_phi_fu_276_p4 = j_6_reg_908;
    end else begin
        ap_phi_mux_j_5_phi_fu_276_p4 = j_5_reg_272;
    end
end

always @ (*) begin
    if (((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_265_p4 = j_4_reg_788;
    end else begin
        ap_phi_mux_j_phi_fu_265_p4 = j_reg_261;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ret_address0 = zext_ln285_fu_772_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ret_address0 = zext_ln283_fu_752_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ret_address0 = zext_ln242_1_reg_868;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ret_address0 = zext_ln235_reg_813;
    end else begin
        ret_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ret_address1 = zext_ln284_fu_762_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ret_address1 = zext_ln282_fu_741_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ret_address1 = zext_ln242_reg_858;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ret_address1 = zext_ln231_reg_803;
    end else begin
        ret_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ret_ce0 = 1'b1;
    end else begin
        ret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ret_ce1 = 1'b1;
    end else begin
        ret_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ret_d0 = xor_ln278_reg_903;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ret_d0 = xor_ln254_2_fu_562_p2;
        end else begin
            ret_d0 = 'bx;
        end
    end else begin
        ret_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ret_d1 = xor_ln266_2_reg_898;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ret_d1 = xor_ln242_2_fu_484_p2;
        end else begin
            ret_d1 = 'bx;
        end
    end else begin
        ret_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln228_reg_793_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ret_we0 = 1'b1;
    end else begin
        ret_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln228_reg_793_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln228_reg_793 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ret_we1 = 1'b1;
    end else begin
        ret_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        statemt_address0 = zext_ln285_reg_953;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        statemt_address0 = zext_ln283_reg_933;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        statemt_address0 = zext_ln242_1_fu_380_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        statemt_address0 = zext_ln235_fu_335_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        statemt_address1 = zext_ln284_reg_943;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        statemt_address1 = zext_ln282_reg_923;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        statemt_address1 = zext_ln242_fu_370_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        statemt_address1 = zext_ln231_fu_324_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln281_reg_913 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln281_reg_913 == 1'd0)))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln281_reg_913 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln281_reg_913 == 1'd0)))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            word_address0 = zext_ln279_fu_405_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            word_address0 = zext_ln254_fu_360_p1;
        end else begin
            word_address0 = 'bx;
        end
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            word_address1 = zext_ln266_fu_394_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            word_address1 = zext_ln242_2_fu_345_p1;
        end else begin
            word_address1 = 'bx;
        end
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln228_fu_303_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln228_fu_303_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln281_fu_724_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln281_fu_724_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln242_fu_340_p2 = (mul54_reg_783 + zext_ln228_fu_308_p1);

assign add_ln254_fu_354_p2 = (zext_ln242_4_fu_350_p1 + 8'd120);

assign add_ln266_fu_388_p2 = (zext_ln242_3_fu_385_p1 + 9'd240);

assign add_ln279_fu_399_p2 = ($signed(zext_ln242_3_fu_385_p1) + $signed(9'd360));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln228_fu_303_p2 = ((ap_phi_mux_j_phi_fu_265_p4 == nb) ? 1'b1 : 1'b0);

assign icmp_ln281_fu_724_p2 = ((ap_phi_mux_j_5_phi_fu_276_p4 == nb) ? 1'b1 : 1'b0);

assign j_4_fu_297_p2 = (ap_phi_mux_j_phi_fu_265_p4 + 4'd1);

assign j_6_fu_718_p2 = (ap_phi_mux_j_5_phi_fu_276_p4 + 4'd1);

assign mul54_fu_291_p0 = mul54_fu_291_p00;

assign mul54_fu_291_p00 = n;

assign mul54_fu_291_p1 = mul54_fu_291_p10;

assign mul54_fu_291_p10 = nb;

assign or_ln235_fu_329_p2 = (shl_ln_fu_316_p3 | 5'd1);

assign or_ln242_1_fu_375_p2 = (shl_ln_reg_797 | 5'd3);

assign or_ln242_fu_365_p2 = (shl_ln_reg_797 | 5'd2);

assign or_ln283_fu_746_p2 = (shl_ln8_fu_733_p3 | 5'd1);

assign or_ln284_fu_757_p2 = (shl_ln8_reg_917 | 5'd2);

assign or_ln285_fu_767_p2 = (shl_ln8_reg_917 | 5'd3);

assign select_ln232_fu_428_p3 = ((tmp_fu_415_p3[0:0] == 1'b1) ? xor_ln233_fu_422_p2 : shl_ln231_fu_410_p2);

assign select_ln246_fu_504_p3 = ((tmp_5_fu_491_p3[0:0] == 1'b1) ? xor_ln247_fu_498_p2 : shl_ln236_fu_436_p2);

assign select_ln258_fu_583_p3 = ((tmp_7_fu_569_p3[0:0] == 1'b1) ? xor_ln259_fu_577_p2 : shl_ln249_fu_512_p2);

assign select_ln270_fu_661_p3 = ((tmp_9_fu_647_p3[0:0] == 1'b1) ? xor_ln271_fu_655_p2 : shl_ln261_fu_591_p2);

assign shl_ln231_fu_410_p2 = x_6_reg_838 << 8'd1;

assign shl_ln236_fu_436_p2 = x_reg_848 << 8'd1;

assign shl_ln249_fu_512_p2 = statemt_q1 << 8'd1;

assign shl_ln261_fu_591_p2 = statemt_q0 << 8'd1;

assign shl_ln8_fu_733_p3 = {{trunc_ln282_fu_729_p1}, {2'd0}};

assign shl_ln_fu_316_p3 = {{trunc_ln231_fu_312_p1}, {2'd0}};

assign statemt_d0 = ret_q0;

assign statemt_d1 = ret_q1;

assign tmp_10_fu_674_p3 = x_6_reg_838[32'd7];

assign tmp_4_fu_446_p3 = x_reg_848[32'd7];

assign tmp_5_fu_491_p3 = x_reg_848[32'd7];

assign tmp_6_fu_524_p3 = statemt_q1[32'd7];

assign tmp_7_fu_569_p3 = statemt_q1[32'd7];

assign tmp_8_fu_603_p3 = statemt_q0[32'd7];

assign tmp_9_fu_647_p3 = statemt_q0[32'd7];

assign tmp_fu_415_p3 = x_6_reg_838[32'd7];

assign trunc_ln231_fu_312_p1 = ap_phi_mux_j_phi_fu_265_p4[2:0];

assign trunc_ln282_fu_729_p1 = ap_phi_mux_j_5_phi_fu_276_p4[2:0];

assign x_1_fu_459_p3 = ((tmp_4_fu_446_p3[0:0] == 1'b1) ? xor_ln238_fu_453_p2 : xor_ln219_fu_441_p2);

assign x_3_fu_538_p3 = ((tmp_6_fu_524_p3[0:0] == 1'b1) ? xor_ln251_fu_532_p2 : xor_ln219_1_fu_518_p2);

assign x_5_fu_617_p3 = ((tmp_8_fu_603_p3[0:0] == 1'b1) ? xor_ln263_fu_611_p2 : xor_ln219_2_fu_597_p2);

assign x_7_fu_687_p3 = ((tmp_10_fu_674_p3[0:0] == 1'b1) ? xor_ln275_fu_681_p2 : xor_ln219_3_fu_669_p2);

assign xor_ln219_1_fu_518_p2 = (statemt_q1 ^ shl_ln249_fu_512_p2);

assign xor_ln219_2_fu_597_p2 = (statemt_q0 ^ shl_ln261_fu_591_p2);

assign xor_ln219_3_fu_669_p2 = (x_6_reg_838 ^ shl_ln231_fu_410_p2);

assign xor_ln219_fu_441_p2 = (x_reg_848 ^ shl_ln236_fu_436_p2);

assign xor_ln233_fu_422_p2 = (shl_ln231_fu_410_p2 ^ 8'd27);

assign xor_ln238_fu_453_p2 = (xor_ln219_fu_441_p2 ^ 8'd27);

assign xor_ln242_1_fu_472_p2 = (xor_ln242_fu_467_p2 ^ statemt_q0);

assign xor_ln242_2_fu_484_p2 = (xor_ln242_3_fu_478_p2 ^ x_1_fu_459_p3);

assign xor_ln242_3_fu_478_p2 = (xor_ln242_1_fu_472_p2 ^ select_ln232_fu_428_p3);

assign xor_ln242_fu_467_p2 = (word_load_reg_888 ^ statemt_q1);

assign xor_ln247_fu_498_p2 = (shl_ln236_fu_436_p2 ^ 8'd27);

assign xor_ln251_fu_532_p2 = (xor_ln219_1_fu_518_p2 ^ 8'd27);

assign xor_ln254_1_fu_550_p2 = (xor_ln254_fu_546_p2 ^ statemt_q0);

assign xor_ln254_2_fu_562_p2 = (xor_ln254_3_fu_556_p2 ^ x_3_fu_538_p3);

assign xor_ln254_3_fu_556_p2 = (xor_ln254_1_fu_550_p2 ^ select_ln246_fu_504_p3);

assign xor_ln254_fu_546_p2 = (x_6_reg_838 ^ word_load_8_reg_893);

assign xor_ln259_fu_577_p2 = (shl_ln249_fu_512_p2 ^ 8'd27);

assign xor_ln263_fu_611_p2 = (xor_ln219_2_fu_597_p2 ^ 8'd27);

assign xor_ln266_1_fu_630_p2 = (xor_ln266_fu_625_p2 ^ x_reg_848);

assign xor_ln266_2_fu_641_p2 = (xor_ln266_3_fu_635_p2 ^ x_5_fu_617_p3);

assign xor_ln266_3_fu_635_p2 = (xor_ln266_1_fu_630_p2 ^ select_ln258_fu_583_p3);

assign xor_ln266_fu_625_p2 = (x_6_reg_838 ^ word_q1);

assign xor_ln271_fu_655_p2 = (shl_ln261_fu_591_p2 ^ 8'd27);

assign xor_ln275_fu_681_p2 = (xor_ln219_3_fu_669_p2 ^ 8'd27);

assign xor_ln278_1_fu_706_p2 = (xor_ln279_1_fu_700_p2 ^ x_7_fu_687_p3);

assign xor_ln278_fu_712_p2 = (xor_ln278_1_fu_706_p2 ^ select_ln270_fu_661_p3);

assign xor_ln279_1_fu_700_p2 = (xor_ln279_fu_695_p2 ^ statemt_q1);

assign xor_ln279_fu_695_p2 = (x_reg_848 ^ word_q0);

assign zext_ln228_fu_308_p1 = ap_phi_mux_j_phi_fu_265_p4;

assign zext_ln231_fu_324_p1 = shl_ln_fu_316_p3;

assign zext_ln235_fu_335_p1 = or_ln235_fu_329_p2;

assign zext_ln242_1_fu_380_p1 = or_ln242_1_fu_375_p2;

assign zext_ln242_2_fu_345_p1 = add_ln242_fu_340_p2;

assign zext_ln242_3_fu_385_p1 = add_ln242_reg_823;

assign zext_ln242_4_fu_350_p1 = add_ln242_fu_340_p2;

assign zext_ln242_fu_370_p1 = or_ln242_fu_365_p2;

assign zext_ln254_fu_360_p1 = add_ln254_fu_354_p2;

assign zext_ln266_fu_394_p1 = add_ln266_fu_388_p2;

assign zext_ln279_fu_405_p1 = add_ln279_fu_399_p2;

assign zext_ln282_fu_741_p1 = shl_ln8_fu_733_p3;

assign zext_ln283_fu_752_p1 = or_ln283_fu_746_p2;

assign zext_ln284_fu_762_p1 = or_ln284_fu_757_p2;

assign zext_ln285_fu_772_p1 = or_ln285_fu_767_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_797[1:0] <= 2'b00;
    zext_ln231_reg_803[1:0] <= 2'b00;
    zext_ln231_reg_803[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln235_reg_813[1:0] <= 2'b01;
    zext_ln235_reg_813[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln242_reg_858[1:0] <= 2'b10;
    zext_ln242_reg_858[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln242_1_reg_868[1:0] <= 2'b11;
    zext_ln242_1_reg_868[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln8_reg_917[1:0] <= 2'b00;
    zext_ln282_reg_923[1:0] <= 2'b00;
    zext_ln282_reg_923[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln283_reg_933[1:0] <= 2'b01;
    zext_ln283_reg_933[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln284_reg_943[1:0] <= 2'b10;
    zext_ln284_reg_943[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln285_reg_953[1:0] <= 2'b11;
    zext_ln285_reg_953[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_encrypt_MixColumn_AddRoundKey
