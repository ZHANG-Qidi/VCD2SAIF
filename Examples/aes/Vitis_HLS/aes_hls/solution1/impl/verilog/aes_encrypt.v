// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_encrypt_aes_encrypt,hls_ip_2020_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.140000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=2554,HLS_SYN_LUT=14685,HLS_VERSION=2020_2_2}" *)

module aes_encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt256_i,
        statemt256_o,
        statemt256_o_ap_vld,
        key256,
        type_r
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_pp0_stage0 = 24'd4;
parameter    ap_ST_fsm_state5 = 24'd8;
parameter    ap_ST_fsm_pp1_stage0 = 24'd16;
parameter    ap_ST_fsm_state8 = 24'd32;
parameter    ap_ST_fsm_state9 = 24'd64;
parameter    ap_ST_fsm_state10 = 24'd128;
parameter    ap_ST_fsm_state11 = 24'd256;
parameter    ap_ST_fsm_state12 = 24'd512;
parameter    ap_ST_fsm_state13 = 24'd1024;
parameter    ap_ST_fsm_state14 = 24'd2048;
parameter    ap_ST_fsm_state15 = 24'd4096;
parameter    ap_ST_fsm_state16 = 24'd8192;
parameter    ap_ST_fsm_state17 = 24'd16384;
parameter    ap_ST_fsm_state18 = 24'd32768;
parameter    ap_ST_fsm_state19 = 24'd65536;
parameter    ap_ST_fsm_state20 = 24'd131072;
parameter    ap_ST_fsm_state21 = 24'd262144;
parameter    ap_ST_fsm_state22 = 24'd524288;
parameter    ap_ST_fsm_state23 = 24'd1048576;
parameter    ap_ST_fsm_state24 = 24'd2097152;
parameter    ap_ST_fsm_pp4_stage0 = 24'd4194304;
parameter    ap_ST_fsm_state27 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] statemt256_i;
output  [255:0] statemt256_o;
output   statemt256_o_ap_vld;
input  [255:0] key256;
input  [31:0] type_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg statemt256_o_ap_vld;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_reg_367;
reg   [5:0] i_2_reg_378;
reg   [5:0] i_6_reg_424;
reg   [255:0] p_Val2_1_reg_435;
wire   [7:0] grp_fu_474_p2;
reg   [7:0] reg_486;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [7:0] grp_fu_480_p2;
reg   [7:0] reg_491;
wire   [0:0] icmp_ln82_fu_496_p2;
reg   [0:0] icmp_ln82_reg_1647;
wire   [0:0] icmp_ln82_1_fu_502_p2;
reg   [0:0] icmp_ln82_1_reg_1652;
wire   [0:0] or_ln82_3_fu_520_p2;
reg   [0:0] or_ln82_3_reg_1658;
wire    ap_CS_fsm_state2;
reg   [255:0] data256_V_reg_1673;
wire   [0:0] icmp_ln82_3_fu_550_p2;
reg   [0:0] icmp_ln82_3_reg_1682;
wire   [0:0] or_ln82_1_fu_563_p2;
reg   [0:0] or_ln82_1_reg_1687;
wire   [0:0] icmp_ln82_5_fu_577_p2;
reg   [0:0] icmp_ln82_5_reg_1694;
wire   [0:0] or_ln82_5_fu_613_p2;
reg   [0:0] or_ln82_5_reg_1699;
wire   [8:0] select_ln82_6_fu_619_p3;
reg   [8:0] select_ln82_6_reg_1707;
wire   [8:0] select_ln82_10_fu_650_p3;
reg   [8:0] select_ln82_10_reg_1713;
wire   [5:0] round_fu_674_p3;
reg   [5:0] round_reg_1719;
wire   [4:0] sub_i_fu_686_p2;
reg   [4:0] sub_i_reg_1724;
wire   [5:0] i_1_fu_692_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln16_fu_698_p2;
reg   [0:0] icmp_ln16_reg_1734;
wire   [8:0] sub_ln708_2_fu_785_p2;
reg   [8:0] sub_ln708_2_reg_1738;
wire   [255:0] lshr_ln708_fu_795_p2;
reg   [255:0] lshr_ln708_reg_1743;
wire   [4:0] sub_ln17_fu_801_p2;
reg   [4:0] sub_ln17_reg_1748;
wire   [5:0] round_1_fu_853_p3;
reg   [5:0] round_1_reg_1753;
wire    ap_CS_fsm_state5;
wire   [4:0] sub_i16_fu_865_p2;
reg   [4:0] sub_i16_reg_1758;
wire   [5:0] i_3_fu_871_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln16_1_fu_877_p2;
reg   [0:0] icmp_ln16_1_reg_1768;
wire   [8:0] sub_ln708_5_fu_964_p2;
reg   [8:0] sub_ln708_5_reg_1772;
wire   [255:0] lshr_ln708_2_fu_974_p2;
reg   [255:0] lshr_ln708_2_reg_1777;
wire   [4:0] sub_ln17_1_fu_980_p2;
reg   [4:0] sub_ln17_1_reg_1782;
wire   [0:0] or_ln8_fu_1041_p2;
reg   [0:0] or_ln8_reg_1787;
wire    ap_CS_fsm_state9;
wire   [2:0] select_ln136_5_fu_1060_p3;
reg   [2:0] select_ln136_5_reg_1793;
wire   [3:0] zext_ln8_fu_1067_p1;
reg   [3:0] zext_ln8_reg_1798;
wire   [3:0] select_ln136_6_fu_1083_p3;
reg   [3:0] select_ln136_6_reg_1803;
wire   [3:0] nb_1_fu_1091_p3;
reg   [3:0] nb_1_reg_1809;
wire   [3:0] j_1_fu_1099_p2;
reg   [3:0] j_1_reg_1814;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln25_fu_1105_p2;
wire   [4:0] shl_ln2_fu_1134_p3;
reg   [4:0] shl_ln2_reg_1832;
reg   [4:0] statemt_addr_1_reg_1838;
reg   [4:0] statemt_addr_2_reg_1844;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln26_fu_1182_p2;
reg   [7:0] xor_ln26_reg_1860;
wire   [7:0] xor_ln27_fu_1188_p2;
reg   [7:0] xor_ln27_reg_1865;
reg   [4:0] statemt_addr_3_reg_1870;
reg   [4:0] statemt_addr_4_reg_1875;
wire   [3:0] add_fu_1219_p3;
reg   [3:0] add_reg_1880;
wire    ap_CS_fsm_state14;
wire   [6:0] zext_ln25_fu_1232_p1;
reg   [6:0] zext_ln25_reg_1885;
wire   [3:0] i_5_fu_1241_p2;
reg   [3:0] i_5_reg_1893;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln167_fu_1236_p2;
wire   [3:0] nb_2_fu_1258_p3;
reg   [3:0] nb_2_reg_1898;
wire    ap_CS_fsm_state19;
wire   [6:0] mul_ln25_fu_1270_p2;
reg   [6:0] mul_ln25_reg_1903;
wire   [3:0] j_3_fu_1275_p2;
reg   [3:0] j_3_reg_1908;
wire    ap_CS_fsm_state20;
wire   [6:0] add_ln26_fu_1290_p2;
reg   [6:0] add_ln26_reg_1916;
wire   [0:0] icmp_ln25_1_fu_1281_p2;
wire   [4:0] shl_ln26_1_fu_1319_p3;
reg   [4:0] shl_ln26_1_reg_1931;
reg   [4:0] statemt_addr_5_reg_1937;
reg   [4:0] statemt_addr_6_reg_1942;
reg   [4:0] statemt_addr_7_reg_1957;
reg   [4:0] statemt_addr_8_reg_1962;
wire   [255:0] select_ln23_1_fu_1427_p3;
wire    ap_CS_fsm_state24;
wire   [5:0] round_2_fu_1449_p3;
reg   [5:0] round_2_reg_1972;
wire   [4:0] sub_i79_fu_1461_p2;
reg   [4:0] sub_i79_reg_1977;
wire   [5:0] i_7_fu_1467_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state25_pp4_stage0_iter0;
wire    ap_block_state26_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln36_fu_1473_p2;
reg   [0:0] icmp_ln36_reg_1987;
wire   [4:0] empty_32_fu_1478_p1;
reg   [4:0] empty_32_reg_1991;
wire   [255:0] p_Result_4_fu_1631_p2;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state25;
reg   [8:0] word_address0;
reg    word_ce0;
reg    word_we0;
wire   [7:0] word_q0;
reg   [8:0] word_address1;
reg    word_ce1;
reg    word_we1;
wire   [7:0] word_q1;
reg   [4:0] statemt_address0;
reg    statemt_ce0;
reg    statemt_we0;
reg   [7:0] statemt_d0;
wire   [7:0] statemt_q0;
reg   [4:0] statemt_address1;
reg    statemt_ce1;
reg    statemt_we1;
reg   [7:0] statemt_d1;
wire   [7:0] statemt_q1;
reg   [4:0] key_address0;
reg    key_ce0;
reg    key_we0;
wire   [7:0] key_d0;
wire   [7:0] key_q0;
wire    grp_ByteSub_ShiftRow_fu_446_ap_start;
wire    grp_ByteSub_ShiftRow_fu_446_ap_done;
wire    grp_ByteSub_ShiftRow_fu_446_ap_idle;
wire    grp_ByteSub_ShiftRow_fu_446_ap_ready;
wire   [4:0] grp_ByteSub_ShiftRow_fu_446_statemt_address0;
wire    grp_ByteSub_ShiftRow_fu_446_statemt_ce0;
wire    grp_ByteSub_ShiftRow_fu_446_statemt_we0;
wire   [7:0] grp_ByteSub_ShiftRow_fu_446_statemt_d0;
wire   [4:0] grp_ByteSub_ShiftRow_fu_446_statemt_address1;
wire    grp_ByteSub_ShiftRow_fu_446_statemt_ce1;
wire    grp_ByteSub_ShiftRow_fu_446_statemt_we1;
wire   [7:0] grp_ByteSub_ShiftRow_fu_446_statemt_d1;
wire    grp_KeySchedule_fu_454_ap_start;
wire    grp_KeySchedule_fu_454_ap_done;
wire    grp_KeySchedule_fu_454_ap_idle;
wire    grp_KeySchedule_fu_454_ap_ready;
wire   [4:0] grp_KeySchedule_fu_454_key_address0;
wire    grp_KeySchedule_fu_454_key_ce0;
wire   [8:0] grp_KeySchedule_fu_454_word_address0;
wire    grp_KeySchedule_fu_454_word_ce0;
wire    grp_KeySchedule_fu_454_word_we0;
wire   [7:0] grp_KeySchedule_fu_454_word_d0;
wire   [8:0] grp_KeySchedule_fu_454_word_address1;
wire    grp_KeySchedule_fu_454_word_ce1;
wire    grp_KeySchedule_fu_454_word_we1;
wire   [7:0] grp_KeySchedule_fu_454_word_d1;
wire    grp_MixColumn_AddRoundKey_fu_465_ap_start;
wire    grp_MixColumn_AddRoundKey_fu_465_ap_done;
wire    grp_MixColumn_AddRoundKey_fu_465_ap_idle;
wire    grp_MixColumn_AddRoundKey_fu_465_ap_ready;
wire   [4:0] grp_MixColumn_AddRoundKey_fu_465_statemt_address0;
wire    grp_MixColumn_AddRoundKey_fu_465_statemt_ce0;
wire    grp_MixColumn_AddRoundKey_fu_465_statemt_we0;
wire   [7:0] grp_MixColumn_AddRoundKey_fu_465_statemt_d0;
wire   [4:0] grp_MixColumn_AddRoundKey_fu_465_statemt_address1;
wire    grp_MixColumn_AddRoundKey_fu_465_statemt_ce1;
wire    grp_MixColumn_AddRoundKey_fu_465_statemt_we1;
wire   [7:0] grp_MixColumn_AddRoundKey_fu_465_statemt_d1;
wire   [8:0] grp_MixColumn_AddRoundKey_fu_465_word_address0;
wire    grp_MixColumn_AddRoundKey_fu_465_word_ce0;
wire   [8:0] grp_MixColumn_AddRoundKey_fu_465_word_address1;
wire    grp_MixColumn_AddRoundKey_fu_465_word_ce1;
reg   [3:0] j_reg_389;
wire    ap_CS_fsm_state13;
reg   [3:0] i_4_reg_401;
wire    ap_CS_fsm_state18;
reg   [3:0] j_2_reg_413;
wire    ap_CS_fsm_state23;
wire    ap_block_pp4_stage0;
reg    grp_ByteSub_ShiftRow_fu_446_ap_start_reg;
wire    ap_CS_fsm_state16;
reg    grp_KeySchedule_fu_454_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_MixColumn_AddRoundKey_fu_465_ap_start_reg;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln17_fu_825_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln17_1_fu_1004_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln26_fu_1110_p1;
wire   [63:0] zext_ln27_2_fu_1125_p1;
wire   [63:0] zext_ln26_1_fu_1142_p1;
wire   [63:0] zext_ln27_fu_1153_p1;
wire   [63:0] tmp_4_fu_1162_p3;
wire   [63:0] zext_ln29_2_fu_1177_p1;
wire   [63:0] zext_ln28_fu_1199_p1;
wire   [63:0] zext_ln29_fu_1209_p1;
wire   [63:0] zext_ln26_3_fu_1295_p1;
wire   [63:0] zext_ln27_3_fu_1310_p1;
wire   [63:0] zext_ln26_2_fu_1327_p1;
wire   [63:0] zext_ln27_1_fu_1338_p1;
wire   [63:0] zext_ln28_2_fu_1352_p1;
wire   [63:0] zext_ln29_3_fu_1363_p1;
wire   [63:0] zext_ln28_1_fu_1373_p1;
wire   [63:0] zext_ln29_1_fu_1383_p1;
wire   [63:0] zext_ln37_fu_1487_p1;
wire    ap_CS_fsm_state27;
wire   [7:0] trunc_ln17_fu_820_p1;
wire   [0:0] icmp_ln82_4_fu_508_p2;
wire   [0:0] or_ln82_2_fu_514_p2;
wire   [0:0] or_ln82_fu_533_p2;
wire   [8:0] select_ln82_fu_526_p3;
wire   [0:0] icmp_ln82_2_fu_545_p2;
wire   [8:0] select_ln82_2_fu_555_p3;
wire   [0:0] or_ln82_4_fu_590_p2;
wire   [8:0] select_ln82_4_fu_582_p3;
wire   [0:0] icmp_ln82_7_fu_608_p2;
wire   [0:0] icmp_ln82_6_fu_603_p2;
wire   [8:0] select_ln82_5_fu_595_p3;
wire   [8:0] select_ln82_1_fu_537_p3;
wire   [8:0] select_ln82_3_fu_569_p3;
wire   [8:0] select_ln82_7_fu_627_p3;
wire   [8:0] select_ln82_9_fu_642_p3;
wire   [8:0] select_ln82_8_fu_634_p3;
wire   [5:0] select_ln82_11_fu_658_p3;
wire   [5:0] select_ln82_12_fu_666_p3;
wire   [4:0] empty_fu_682_p1;
wire   [4:0] empty_22_fu_703_p1;
wire   [7:0] shl_ln_fu_707_p3;
wire   [7:0] or_ln17_fu_715_p2;
wire   [8:0] zext_ln708_fu_727_p1;
wire   [8:0] zext_ln708_1_fu_731_p1;
wire   [0:0] icmp_ln708_fu_721_p2;
wire   [8:0] sub_ln708_fu_744_p2;
wire   [8:0] sub_ln708_1_fu_756_p2;
reg   [255:0] tmp_fu_735_p4;
wire   [8:0] xor_ln708_fu_750_p2;
wire   [8:0] select_ln708_fu_762_p3;
wire   [8:0] select_ln708_2_fu_777_p3;
wire   [255:0] select_ln708_1_fu_770_p3;
wire   [255:0] zext_ln708_2_fu_791_p1;
wire   [255:0] zext_ln708_3_fu_806_p1;
wire   [255:0] lshr_ln708_1_fu_809_p2;
wire   [255:0] p_Result_s_fu_815_p2;
wire   [0:0] icmp_ln5_1_fu_834_p2;
wire   [0:0] icmp_ln5_fu_829_p2;
wire   [0:0] or_ln5_fu_847_p2;
wire   [5:0] select_ln5_fu_839_p3;
wire   [4:0] empty_23_fu_861_p1;
wire   [4:0] empty_25_fu_882_p1;
wire   [7:0] shl_ln17_1_fu_886_p3;
wire   [7:0] or_ln17_1_fu_894_p2;
wire   [8:0] zext_ln708_4_fu_906_p1;
wire   [8:0] zext_ln708_5_fu_910_p1;
wire   [0:0] icmp_ln708_1_fu_900_p2;
wire   [8:0] sub_ln708_3_fu_923_p2;
wire   [8:0] sub_ln708_4_fu_935_p2;
reg   [255:0] tmp_1_fu_914_p4;
wire   [8:0] xor_ln708_1_fu_929_p2;
wire   [8:0] select_ln708_3_fu_941_p3;
wire   [8:0] select_ln708_5_fu_956_p3;
wire   [255:0] select_ln708_4_fu_949_p3;
wire   [255:0] zext_ln708_6_fu_970_p1;
wire   [255:0] zext_ln708_7_fu_985_p1;
wire   [255:0] lshr_ln708_3_fu_988_p2;
wire   [255:0] p_Result_1_fu_994_p2;
wire   [3:0] select_ln136_fu_1008_p3;
wire   [0:0] or_ln136_fu_1029_p2;
wire   [2:0] select_ln136_2_fu_1022_p3;
wire   [2:0] round_val_fu_1033_p3;
wire   [2:0] select_ln136_4_fu_1053_p3;
wire   [2:0] select_ln8_fu_1045_p3;
wire   [0:0] or_ln136_1_fu_1078_p2;
wire   [3:0] select_ln136_7_fu_1071_p3;
wire   [3:0] nb_fu_1015_p3;
wire   [3:0] xor_ln27_2_fu_1115_p2;
wire  signed [6:0] sext_ln27_fu_1121_p1;
wire   [2:0] trunc_ln26_fu_1130_p1;
wire   [4:0] or_ln27_fu_1147_p2;
wire   [8:0] zext_ln26_4_fu_1158_p1;
wire   [8:0] add_ln29_fu_1171_p2;
wire   [4:0] or_ln28_fu_1194_p2;
wire   [4:0] or_ln29_fu_1204_p2;
wire   [2:0] empty_27_fu_1214_p2;
wire   [3:0] add_ln167_fu_1227_p2;
wire   [0:0] or_ln8_1_fu_1254_p2;
wire   [3:0] select_ln8_1_fu_1247_p3;
wire   [3:0] mul_ln25_fu_1270_p0;
wire   [3:0] mul_ln25_fu_1270_p1;
wire   [6:0] zext_ln25_2_fu_1286_p1;
wire   [7:0] zext_ln26_6_fu_1300_p1;
wire   [7:0] add_ln27_fu_1304_p2;
wire   [2:0] trunc_ln26_1_fu_1315_p1;
wire   [4:0] or_ln27_1_fu_1332_p2;
wire   [8:0] zext_ln26_5_fu_1343_p1;
wire   [8:0] add_ln28_fu_1346_p2;
wire   [8:0] add_ln29_1_fu_1357_p2;
wire   [4:0] or_ln28_1_fu_1368_p2;
wire   [4:0] or_ln29_1_fu_1378_p2;
wire   [0:0] icmp_ln23_fu_1410_p2;
wire   [255:0] p_Result_3_fu_1399_p5;
wire   [0:0] icmp_ln23_1_fu_1422_p2;
wire   [255:0] p_Result_2_fu_1388_p5;
wire   [255:0] select_ln23_fu_1415_p3;
wire   [0:0] or_ln23_fu_1443_p2;
wire   [5:0] select_ln23_2_fu_1435_p3;
wire   [4:0] empty_30_fu_1457_p1;
wire   [4:0] sub_ln37_fu_1482_p2;
wire   [7:0] shl_ln3_fu_1492_p3;
wire   [7:0] or_ln37_fu_1499_p2;
wire   [8:0] zext_ln388_fu_1515_p1;
wire   [0:0] icmp_ln388_fu_1509_p2;
wire   [8:0] zext_ln388_1_fu_1519_p1;
wire   [8:0] xor_ln388_fu_1523_p2;
wire   [8:0] select_ln388_fu_1529_p3;
wire   [8:0] select_ln388_2_fu_1545_p3;
wire   [8:0] select_ln388_1_fu_1537_p3;
wire   [8:0] xor_ln388_1_fu_1553_p2;
wire   [255:0] zext_ln240_fu_1505_p1;
wire   [255:0] zext_ln388_2_fu_1559_p1;
wire   [255:0] shl_ln388_fu_1571_p2;
reg   [255:0] tmp_3_fu_1577_p4;
wire   [255:0] zext_ln388_3_fu_1563_p1;
wire   [255:0] zext_ln388_4_fu_1567_p1;
wire   [255:0] shl_ln388_1_fu_1595_p2;
wire   [255:0] lshr_ln388_fu_1601_p2;
wire   [255:0] and_ln388_fu_1607_p2;
wire   [255:0] xor_ln388_2_fu_1613_p2;
wire   [255:0] select_ln388_3_fu_1587_p3;
wire   [255:0] and_ln388_1_fu_1619_p2;
wire   [255:0] and_ln388_2_fu_1625_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [6:0] mul_ln25_fu_1270_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_ByteSub_ShiftRow_fu_446_ap_start_reg = 1'b0;
#0 grp_KeySchedule_fu_454_ap_start_reg = 1'b0;
#0 grp_MixColumn_AddRoundKey_fu_465_ap_start_reg = 1'b0;
end

aes_encrypt_word #(
    .DataWidth( 8 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
word_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(word_address0),
    .ce0(word_ce0),
    .we0(word_we0),
    .d0(grp_KeySchedule_fu_454_word_d0),
    .q0(word_q0),
    .address1(word_address1),
    .ce1(word_ce1),
    .we1(word_we1),
    .d1(grp_KeySchedule_fu_454_word_d1),
    .q1(word_q1)
);

aes_encrypt_MixColumn_AddRoundKey_ret #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
statemt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(statemt_address0),
    .ce0(statemt_ce0),
    .we0(statemt_we0),
    .d0(statemt_d0),
    .q0(statemt_q0),
    .address1(statemt_address1),
    .ce1(statemt_ce1),
    .we1(statemt_we1),
    .d1(statemt_d1),
    .q1(statemt_q1)
);

aes_encrypt_key #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_address0),
    .ce0(key_ce0),
    .we0(key_we0),
    .d0(key_d0),
    .q0(key_q0)
);

aes_encrypt_ByteSub_ShiftRow grp_ByteSub_ShiftRow_fu_446(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ByteSub_ShiftRow_fu_446_ap_start),
    .ap_done(grp_ByteSub_ShiftRow_fu_446_ap_done),
    .ap_idle(grp_ByteSub_ShiftRow_fu_446_ap_idle),
    .ap_ready(grp_ByteSub_ShiftRow_fu_446_ap_ready),
    .statemt_address0(grp_ByteSub_ShiftRow_fu_446_statemt_address0),
    .statemt_ce0(grp_ByteSub_ShiftRow_fu_446_statemt_ce0),
    .statemt_we0(grp_ByteSub_ShiftRow_fu_446_statemt_we0),
    .statemt_d0(grp_ByteSub_ShiftRow_fu_446_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_ByteSub_ShiftRow_fu_446_statemt_address1),
    .statemt_ce1(grp_ByteSub_ShiftRow_fu_446_statemt_ce1),
    .statemt_we1(grp_ByteSub_ShiftRow_fu_446_statemt_we1),
    .statemt_d1(grp_ByteSub_ShiftRow_fu_446_statemt_d1),
    .statemt_q1(statemt_q1),
    .nb(select_ln136_6_reg_1803)
);

aes_encrypt_KeySchedule grp_KeySchedule_fu_454(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeySchedule_fu_454_ap_start),
    .ap_done(grp_KeySchedule_fu_454_ap_done),
    .ap_idle(grp_KeySchedule_fu_454_ap_idle),
    .ap_ready(grp_KeySchedule_fu_454_ap_ready),
    .type_r(type_r),
    .key_address0(grp_KeySchedule_fu_454_key_address0),
    .key_ce0(grp_KeySchedule_fu_454_key_ce0),
    .key_q0(key_q0),
    .word_address0(grp_KeySchedule_fu_454_word_address0),
    .word_ce0(grp_KeySchedule_fu_454_word_ce0),
    .word_we0(grp_KeySchedule_fu_454_word_we0),
    .word_d0(grp_KeySchedule_fu_454_word_d0),
    .word_q0(word_q0),
    .word_address1(grp_KeySchedule_fu_454_word_address1),
    .word_ce1(grp_KeySchedule_fu_454_word_ce1),
    .word_we1(grp_KeySchedule_fu_454_word_we1),
    .word_d1(grp_KeySchedule_fu_454_word_d1),
    .word_q1(word_q1)
);

aes_encrypt_MixColumn_AddRoundKey grp_MixColumn_AddRoundKey_fu_465(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MixColumn_AddRoundKey_fu_465_ap_start),
    .ap_done(grp_MixColumn_AddRoundKey_fu_465_ap_done),
    .ap_idle(grp_MixColumn_AddRoundKey_fu_465_ap_idle),
    .ap_ready(grp_MixColumn_AddRoundKey_fu_465_ap_ready),
    .statemt_address0(grp_MixColumn_AddRoundKey_fu_465_statemt_address0),
    .statemt_ce0(grp_MixColumn_AddRoundKey_fu_465_statemt_ce0),
    .statemt_we0(grp_MixColumn_AddRoundKey_fu_465_statemt_we0),
    .statemt_d0(grp_MixColumn_AddRoundKey_fu_465_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_MixColumn_AddRoundKey_fu_465_statemt_address1),
    .statemt_ce1(grp_MixColumn_AddRoundKey_fu_465_statemt_ce1),
    .statemt_we1(grp_MixColumn_AddRoundKey_fu_465_statemt_we1),
    .statemt_d1(grp_MixColumn_AddRoundKey_fu_465_statemt_d1),
    .statemt_q1(statemt_q1),
    .nb(select_ln136_6_reg_1803),
    .n(i_4_reg_401),
    .word_address0(grp_MixColumn_AddRoundKey_fu_465_word_address0),
    .word_ce0(grp_MixColumn_AddRoundKey_fu_465_word_ce0),
    .word_q0(word_q0),
    .word_address1(grp_MixColumn_AddRoundKey_fu_465_word_address1),
    .word_ce1(grp_MixColumn_AddRoundKey_fu_465_word_ce1),
    .word_q1(word_q1)
);

aes_encrypt_mul_4ns_4ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 7 ))
mul_4ns_4ns_7_1_1_U21(
    .din0(mul_ln25_fu_1270_p0),
    .din1(mul_ln25_fu_1270_p1),
    .dout(mul_ln25_fu_1270_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state25) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state25);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ByteSub_ShiftRow_fu_446_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln167_fu_1236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)) | ((icmp_ln167_fu_1236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)))) begin
            grp_ByteSub_ShiftRow_fu_446_ap_start_reg <= 1'b1;
        end else if ((grp_ByteSub_ShiftRow_fu_446_ap_ready == 1'b1)) begin
            grp_ByteSub_ShiftRow_fu_446_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeySchedule_fu_454_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_KeySchedule_fu_454_ap_start_reg <= 1'b1;
        end else if ((grp_KeySchedule_fu_454_ap_ready == 1'b1)) begin
            grp_KeySchedule_fu_454_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MixColumn_AddRoundKey_fu_465_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_MixColumn_AddRoundKey_fu_465_ap_start_reg <= 1'b1;
        end else if ((grp_MixColumn_AddRoundKey_fu_465_ap_ready == 1'b1)) begin
            grp_MixColumn_AddRoundKey_fu_465_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_378 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln16_1_fu_877_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_2_reg_378 <= i_3_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_MixColumn_AddRoundKey_fu_465_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_4_reg_401 <= i_5_reg_1893;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_4_reg_401 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_6_reg_424 <= 6'd0;
    end else if (((icmp_ln36_fu_1473_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_6_reg_424 <= i_7_fu_1467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_367 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln16_fu_698_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_367 <= i_1_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_2_reg_413 <= j_3_reg_1908;
    end else if (((grp_ByteSub_ShiftRow_fu_446_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        j_2_reg_413 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_389 <= j_1_reg_1814;
    end else if (((grp_KeySchedule_fu_454_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        j_reg_389 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        p_Val2_1_reg_435 <= select_ln23_1_fu_1427_p3;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln36_reg_1987 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        p_Val2_1_reg_435 <= p_Result_4_fu_1631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_1_fu_1281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        add_ln26_reg_1916 <= add_ln26_fu_1290_p2;
        shl_ln26_1_reg_1931[4 : 2] <= shl_ln26_1_fu_1319_p3[4 : 2];
        statemt_addr_5_reg_1937[4 : 2] <= zext_ln26_2_fu_1327_p1[4 : 2];
        statemt_addr_6_reg_1942[4 : 2] <= zext_ln27_1_fu_1338_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_reg_1880[2 : 1] <= add_fu_1219_p3[2 : 1];
        zext_ln25_reg_1885[3 : 1] <= zext_ln25_fu_1232_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data256_V_reg_1673 <= statemt256_i;
        icmp_ln82_3_reg_1682 <= icmp_ln82_3_fu_550_p2;
        icmp_ln82_5_reg_1694 <= icmp_ln82_5_fu_577_p2;
        or_ln82_1_reg_1687 <= or_ln82_1_fu_563_p2;
        or_ln82_5_reg_1699 <= or_ln82_5_fu_613_p2;
        round_reg_1719[5 : 3] <= round_fu_674_p3[5 : 3];
        select_ln82_10_reg_1713[8 : 6] <= select_ln82_10_fu_650_p3[8 : 6];
        select_ln82_6_reg_1707[8 : 6] <= select_ln82_6_fu_619_p3[8 : 6];
        sub_i_reg_1724[4 : 3] <= sub_i_fu_686_p2[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_1473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        empty_32_reg_1991 <= empty_32_fu_1478_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_1236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        i_5_reg_1893 <= i_5_fu_1241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln16_1_reg_1768 <= icmp_ln16_1_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln16_reg_1734 <= icmp_ln16_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln36_reg_1987 <= icmp_ln36_fu_1473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln82_1_reg_1652 <= icmp_ln82_1_fu_502_p2;
        icmp_ln82_reg_1647 <= icmp_ln82_fu_496_p2;
        or_ln82_3_reg_1658 <= or_ln82_3_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_1_reg_1814 <= j_1_fu_1099_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_3_reg_1908 <= j_3_fu_1275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln16_1_fu_877_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        lshr_ln708_2_reg_1777 <= lshr_ln708_2_fu_974_p2;
        sub_ln17_1_reg_1782 <= sub_ln17_1_fu_980_p2;
        sub_ln708_5_reg_1772[8 : 1] <= sub_ln708_5_fu_964_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln16_fu_698_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln708_reg_1743 <= lshr_ln708_fu_795_p2;
        sub_ln17_reg_1748 <= sub_ln17_fu_801_p2;
        sub_ln708_2_reg_1738[8 : 1] <= sub_ln708_2_fu_785_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mul_ln25_reg_1903 <= mul_ln25_fu_1270_p2;
        nb_2_reg_1898[3 : 1] <= nb_2_fu_1258_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        nb_1_reg_1809[3 : 1] <= nb_1_fu_1091_p3[3 : 1];
        or_ln8_reg_1787 <= or_ln8_fu_1041_p2;
        select_ln136_5_reg_1793[2 : 1] <= select_ln136_5_fu_1060_p3[2 : 1];
        select_ln136_6_reg_1803[3 : 1] <= select_ln136_6_fu_1083_p3[3 : 1];
        zext_ln8_reg_1798[2 : 1] <= zext_ln8_fu_1067_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_486 <= grp_fu_474_p2;
        reg_491 <= grp_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        round_1_reg_1753[5 : 3] <= round_1_fu_853_p3[5 : 3];
        sub_i16_reg_1758[4 : 3] <= sub_i16_fu_865_p2[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        round_2_reg_1972[5 : 3] <= round_2_fu_1449_p3[5 : 3];
        sub_i79_reg_1977[4 : 3] <= sub_i79_fu_1461_p2[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        shl_ln2_reg_1832[4 : 2] <= shl_ln2_fu_1134_p3[4 : 2];
        statemt_addr_1_reg_1838[4 : 2] <= zext_ln26_1_fu_1142_p1[4 : 2];
        statemt_addr_2_reg_1844[4 : 2] <= zext_ln27_fu_1153_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_addr_3_reg_1870[4 : 2] <= zext_ln28_fu_1199_p1[4 : 2];
        statemt_addr_4_reg_1875[4 : 2] <= zext_ln29_fu_1209_p1[4 : 2];
        xor_ln26_reg_1860 <= xor_ln26_fu_1182_p2;
        xor_ln27_reg_1865 <= xor_ln27_fu_1188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        statemt_addr_7_reg_1957[4 : 2] <= zext_ln28_1_fu_1373_p1[4 : 2];
        statemt_addr_8_reg_1962[4 : 2] <= zext_ln29_1_fu_1383_p1[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_698_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln16_1_fu_877_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_1473_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        key_address0 = zext_ln17_1_fu_1004_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        key_address0 = grp_KeySchedule_fu_454_key_address0;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        key_ce0 = grp_KeySchedule_fu_454_key_ce0;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln16_1_reg_1768 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        key_we0 = 1'b1;
    end else begin
        key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        statemt256_o_ap_vld = 1'b1;
    end else begin
        statemt256_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        statemt_address0 = statemt_addr_7_reg_1957;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        statemt_address0 = statemt_addr_5_reg_1937;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        statemt_address0 = zext_ln28_1_fu_1373_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        statemt_address0 = zext_ln26_2_fu_1327_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        statemt_address0 = statemt_addr_3_reg_1870;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_address0 = statemt_addr_1_reg_1838;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address0 = zext_ln28_fu_1199_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address0 = zext_ln27_fu_1153_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        statemt_address0 = zext_ln17_fu_825_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_address0 = grp_MixColumn_AddRoundKey_fu_465_statemt_address0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_address0 = grp_ByteSub_ShiftRow_fu_446_statemt_address0;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        statemt_address1 = zext_ln37_fu_1487_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        statemt_address1 = statemt_addr_8_reg_1962;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        statemt_address1 = statemt_addr_6_reg_1942;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        statemt_address1 = zext_ln29_1_fu_1383_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        statemt_address1 = zext_ln27_1_fu_1338_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        statemt_address1 = statemt_addr_4_reg_1875;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_address1 = statemt_addr_2_reg_1844;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address1 = zext_ln29_fu_1209_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        statemt_address1 = zext_ln26_1_fu_1142_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_address1 = grp_MixColumn_AddRoundKey_fu_465_statemt_address1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_address1 = grp_ByteSub_ShiftRow_fu_446_statemt_address1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        statemt_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_ce0 = grp_MixColumn_AddRoundKey_fu_465_statemt_ce0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_ce0 = grp_ByteSub_ShiftRow_fu_446_statemt_ce0;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        statemt_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_ce1 = grp_MixColumn_AddRoundKey_fu_465_statemt_ce1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_ce1 = grp_ByteSub_ShiftRow_fu_446_statemt_ce1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13))) begin
        statemt_d0 = reg_486;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_d0 = xor_ln26_reg_1860;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        statemt_d0 = trunc_ln17_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_d0 = grp_MixColumn_AddRoundKey_fu_465_statemt_d0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_d0 = grp_ByteSub_ShiftRow_fu_446_statemt_d0;
    end else begin
        statemt_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13))) begin
        statemt_d1 = reg_491;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_d1 = xor_ln27_reg_1865;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_d1 = grp_MixColumn_AddRoundKey_fu_465_statemt_d1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_d1 = grp_ByteSub_ShiftRow_fu_446_statemt_d1;
    end else begin
        statemt_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln16_reg_1734 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        statemt_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_we0 = grp_MixColumn_AddRoundKey_fu_465_statemt_we0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_we0 = grp_ByteSub_ShiftRow_fu_446_statemt_we0;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13))) begin
        statemt_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        statemt_we1 = grp_MixColumn_AddRoundKey_fu_465_statemt_we1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        statemt_we1 = grp_ByteSub_ShiftRow_fu_446_statemt_we1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        word_address0 = zext_ln29_3_fu_1363_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        word_address0 = zext_ln27_3_fu_1310_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        word_address0 = zext_ln29_2_fu_1177_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        word_address0 = zext_ln27_2_fu_1125_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        word_address0 = grp_MixColumn_AddRoundKey_fu_465_word_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        word_address0 = grp_KeySchedule_fu_454_word_address0;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        word_address1 = zext_ln28_2_fu_1352_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        word_address1 = zext_ln26_3_fu_1295_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        word_address1 = tmp_4_fu_1162_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        word_address1 = zext_ln26_fu_1110_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        word_address1 = grp_MixColumn_AddRoundKey_fu_465_word_address1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        word_address1 = grp_KeySchedule_fu_454_word_address1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        word_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        word_ce0 = grp_MixColumn_AddRoundKey_fu_465_word_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        word_ce0 = grp_KeySchedule_fu_454_word_ce0;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        word_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        word_ce1 = grp_MixColumn_AddRoundKey_fu_465_word_ce1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        word_ce1 = grp_KeySchedule_fu_454_word_ce1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        word_we0 = grp_KeySchedule_fu_454_word_we0;
    end else begin
        word_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        word_we1 = grp_KeySchedule_fu_454_word_we1;
    end else begin
        word_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln16_fu_698_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln16_fu_698_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln16_1_fu_877_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln16_1_fu_877_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_KeySchedule_fu_454_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln25_fu_1105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln167_fu_1236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((grp_ByteSub_ShiftRow_fu_446_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_MixColumn_AddRoundKey_fu_465_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((grp_ByteSub_ShiftRow_fu_446_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln25_1_fu_1281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((icmp_ln36_fu_1473_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((icmp_ln36_fu_1473_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_1219_p3 = {{1'd1}, {empty_27_fu_1214_p2}};

assign add_ln167_fu_1227_p2 = ($signed(zext_ln8_reg_1798) + $signed(4'd10));

assign add_ln26_fu_1290_p2 = (mul_ln25_reg_1903 + zext_ln25_2_fu_1286_p1);

assign add_ln27_fu_1304_p2 = (zext_ln26_6_fu_1300_p1 + 8'd120);

assign add_ln28_fu_1346_p2 = (zext_ln26_5_fu_1343_p1 + 9'd240);

assign add_ln29_1_fu_1357_p2 = ($signed(zext_ln26_5_fu_1343_p1) + $signed(9'd360));

assign add_ln29_fu_1171_p2 = ($signed(zext_ln26_4_fu_1158_p1) + $signed(9'd360));

assign and_ln388_1_fu_1619_p2 = (xor_ln388_2_fu_1613_p2 & p_Val2_1_reg_435);

assign and_ln388_2_fu_1625_p2 = (select_ln388_3_fu_1587_p3 & and_ln388_fu_1607_p2);

assign and_ln388_fu_1607_p2 = (shl_ln388_1_fu_1595_p2 & lshr_ln388_fu_1601_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state25_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign empty_22_fu_703_p1 = i_reg_367[4:0];

assign empty_23_fu_861_p1 = round_1_fu_853_p3[4:0];

assign empty_25_fu_882_p1 = i_2_reg_378[4:0];

assign empty_27_fu_1214_p2 = (select_ln136_5_reg_1793 | 3'd1);

assign empty_30_fu_1457_p1 = round_2_fu_1449_p3[4:0];

assign empty_32_fu_1478_p1 = i_6_reg_424[4:0];

assign empty_fu_682_p1 = round_fu_674_p3[4:0];

assign grp_ByteSub_ShiftRow_fu_446_ap_start = grp_ByteSub_ShiftRow_fu_446_ap_start_reg;

assign grp_KeySchedule_fu_454_ap_start = grp_KeySchedule_fu_454_ap_start_reg;

assign grp_MixColumn_AddRoundKey_fu_465_ap_start = grp_MixColumn_AddRoundKey_fu_465_ap_start_reg;

assign grp_fu_474_p2 = (word_q1 ^ statemt_q0);

assign grp_fu_480_p2 = (word_q0 ^ statemt_q1);

assign i_1_fu_692_p2 = (i_reg_367 + 6'd1);

assign i_3_fu_871_p2 = (i_2_reg_378 + 6'd1);

assign i_5_fu_1241_p2 = (i_4_reg_401 + 4'd1);

assign i_7_fu_1467_p2 = (i_6_reg_424 + 6'd1);

assign icmp_ln167_fu_1236_p2 = ((i_4_reg_401 > add_reg_1880) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_877_p2 = ((i_2_reg_378 == round_1_reg_1753) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_698_p2 = ((i_reg_367 == round_reg_1719) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_1422_p2 = ((select_ln82_6_reg_1707 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_1410_p2 = ((select_ln82_6_reg_1707 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_1281_p2 = ((j_2_reg_413 == nb_2_reg_1898) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_1105_p2 = ((j_reg_389 == nb_1_reg_1809) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1473_p2 = ((i_6_reg_424 == round_2_reg_1972) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_1509_p2 = ((shl_ln3_fu_1492_p3 > or_ln37_fu_1499_p2) ? 1'b1 : 1'b0);

assign icmp_ln5_1_fu_834_p2 = ((select_ln82_10_reg_1713 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_829_p2 = ((select_ln82_10_reg_1713 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln708_1_fu_900_p2 = ((shl_ln17_1_fu_886_p3 > or_ln17_1_fu_894_p2) ? 1'b1 : 1'b0);

assign icmp_ln708_fu_721_p2 = ((shl_ln_fu_707_p3 > or_ln17_fu_715_p2) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_502_p2 = ((type_r == 32'd128256) ? 1'b1 : 1'b0);

assign icmp_ln82_2_fu_545_p2 = ((type_r == 32'd256128) ? 1'b1 : 1'b0);

assign icmp_ln82_3_fu_550_p2 = ((type_r == 32'd192128) ? 1'b1 : 1'b0);

assign icmp_ln82_4_fu_508_p2 = ((type_r == 32'd192256) ? 1'b1 : 1'b0);

assign icmp_ln82_5_fu_577_p2 = ((type_r == 32'd256192) ? 1'b1 : 1'b0);

assign icmp_ln82_6_fu_603_p2 = ((type_r == 32'd192192) ? 1'b1 : 1'b0);

assign icmp_ln82_7_fu_608_p2 = ((type_r == 32'd128192) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_496_p2 = ((type_r == 32'd256256) ? 1'b1 : 1'b0);

assign j_1_fu_1099_p2 = (j_reg_389 + 4'd1);

assign j_3_fu_1275_p2 = (j_2_reg_413 + 4'd1);

assign key_d0 = p_Result_1_fu_994_p2[7:0];

assign lshr_ln388_fu_1601_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln388_4_fu_1567_p1;

assign lshr_ln708_1_fu_809_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln708_3_fu_806_p1;

assign lshr_ln708_2_fu_974_p2 = select_ln708_4_fu_949_p3 >> zext_ln708_6_fu_970_p1;

assign lshr_ln708_3_fu_988_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> zext_ln708_7_fu_985_p1;

assign lshr_ln708_fu_795_p2 = select_ln708_1_fu_770_p3 >> zext_ln708_2_fu_791_p1;

assign mul_ln25_fu_1270_p0 = mul_ln25_fu_1270_p00;

assign mul_ln25_fu_1270_p00 = nb_2_fu_1258_p3;

assign mul_ln25_fu_1270_p1 = zext_ln25_reg_1885;

assign nb_1_fu_1091_p3 = ((or_ln136_1_fu_1078_p2[0:0] == 1'b1) ? select_ln136_7_fu_1071_p3 : select_ln136_fu_1008_p3);

assign nb_2_fu_1258_p3 = ((or_ln8_1_fu_1254_p2[0:0] == 1'b1) ? select_ln8_1_fu_1247_p3 : 4'd4);

assign nb_fu_1015_p3 = ((or_ln82_5_reg_1699[0:0] == 1'b1) ? 4'd6 : select_ln136_fu_1008_p3);

assign or_ln136_1_fu_1078_p2 = (or_ln8_fu_1041_p2 | or_ln82_1_reg_1687);

assign or_ln136_fu_1029_p2 = (or_ln82_5_reg_1699 | or_ln82_3_reg_1658);

assign or_ln17_1_fu_894_p2 = (shl_ln17_1_fu_886_p3 | 8'd7);

assign or_ln17_fu_715_p2 = (shl_ln_fu_707_p3 | 8'd7);

assign or_ln23_fu_1443_p2 = (icmp_ln23_fu_1410_p2 | icmp_ln23_1_fu_1422_p2);

assign or_ln27_1_fu_1332_p2 = (shl_ln26_1_fu_1319_p3 | 5'd1);

assign or_ln27_fu_1147_p2 = (shl_ln2_fu_1134_p3 | 5'd1);

assign or_ln28_1_fu_1368_p2 = (shl_ln26_1_reg_1931 | 5'd2);

assign or_ln28_fu_1194_p2 = (shl_ln2_reg_1832 | 5'd2);

assign or_ln29_1_fu_1378_p2 = (shl_ln26_1_reg_1931 | 5'd3);

assign or_ln29_fu_1204_p2 = (shl_ln2_reg_1832 | 5'd3);

assign or_ln37_fu_1499_p2 = (shl_ln3_fu_1492_p3 | 8'd7);

assign or_ln5_fu_847_p2 = (icmp_ln5_fu_829_p2 | icmp_ln5_1_fu_834_p2);

assign or_ln82_1_fu_563_p2 = (icmp_ln82_3_fu_550_p2 | icmp_ln82_2_fu_545_p2);

assign or_ln82_2_fu_514_p2 = (icmp_ln82_4_fu_508_p2 | icmp_ln82_1_fu_502_p2);

assign or_ln82_3_fu_520_p2 = (or_ln82_2_fu_514_p2 | icmp_ln82_fu_496_p2);

assign or_ln82_4_fu_590_p2 = (or_ln82_3_reg_1658 | icmp_ln82_5_fu_577_p2);

assign or_ln82_5_fu_613_p2 = (icmp_ln82_7_fu_608_p2 | icmp_ln82_6_fu_603_p2);

assign or_ln82_fu_533_p2 = (icmp_ln82_reg_1647 | icmp_ln82_1_reg_1652);

assign or_ln8_1_fu_1254_p2 = (or_ln8_reg_1787 | or_ln82_3_reg_1658);

assign or_ln8_fu_1041_p2 = (or_ln82_5_reg_1699 | icmp_ln82_5_reg_1694);

assign p_Result_1_fu_994_p2 = (lshr_ln708_3_fu_988_p2 & lshr_ln708_2_reg_1777);

assign p_Result_2_fu_1388_p5 = {{128'd0}, {data256_V_reg_1673[127:0]}};

assign p_Result_3_fu_1399_p5 = {{64'd0}, {data256_V_reg_1673[191:0]}};

assign p_Result_4_fu_1631_p2 = (and_ln388_2_fu_1625_p2 | and_ln388_1_fu_1619_p2);

assign p_Result_s_fu_815_p2 = (lshr_ln708_reg_1743 & lshr_ln708_1_fu_809_p2);

assign round_1_fu_853_p3 = ((or_ln5_fu_847_p2[0:0] == 1'b1) ? select_ln5_fu_839_p3 : 6'd32);

assign round_2_fu_1449_p3 = ((or_ln23_fu_1443_p2[0:0] == 1'b1) ? select_ln23_2_fu_1435_p3 : 6'd32);

assign round_fu_674_p3 = ((or_ln82_5_fu_613_p2[0:0] == 1'b1) ? 6'd24 : select_ln82_12_fu_666_p3);

assign round_val_fu_1033_p3 = ((or_ln136_fu_1029_p2[0:0] == 1'b1) ? select_ln136_2_fu_1022_p3 : 3'd0);

assign select_ln136_2_fu_1022_p3 = ((or_ln82_5_reg_1699[0:0] == 1'b1) ? 3'd2 : 3'd4);

assign select_ln136_4_fu_1053_p3 = ((icmp_ln82_3_reg_1682[0:0] == 1'b1) ? 3'd2 : 3'd4);

assign select_ln136_5_fu_1060_p3 = ((or_ln82_1_reg_1687[0:0] == 1'b1) ? select_ln136_4_fu_1053_p3 : select_ln8_fu_1045_p3);

assign select_ln136_6_fu_1083_p3 = ((or_ln136_1_fu_1078_p2[0:0] == 1'b1) ? select_ln136_7_fu_1071_p3 : nb_fu_1015_p3);

assign select_ln136_7_fu_1071_p3 = ((or_ln82_1_reg_1687[0:0] == 1'b1) ? 4'd4 : 4'd6);

assign select_ln136_fu_1008_p3 = ((or_ln82_3_reg_1658[0:0] == 1'b1) ? 4'd8 : 4'd4);

assign select_ln23_1_fu_1427_p3 = ((icmp_ln23_1_fu_1422_p2[0:0] == 1'b1) ? p_Result_2_fu_1388_p5 : select_ln23_fu_1415_p3);

assign select_ln23_2_fu_1435_p3 = ((icmp_ln23_1_fu_1422_p2[0:0] == 1'b1) ? 6'd16 : 6'd24);

assign select_ln23_fu_1415_p3 = ((icmp_ln23_fu_1410_p2[0:0] == 1'b1) ? p_Result_3_fu_1399_p5 : data256_V_reg_1673);

assign select_ln388_1_fu_1537_p3 = ((icmp_ln388_fu_1509_p2[0:0] == 1'b1) ? zext_ln388_1_fu_1519_p1 : zext_ln388_fu_1515_p1);

assign select_ln388_2_fu_1545_p3 = ((icmp_ln388_fu_1509_p2[0:0] == 1'b1) ? xor_ln388_fu_1523_p2 : zext_ln388_fu_1515_p1);

assign select_ln388_3_fu_1587_p3 = ((icmp_ln388_fu_1509_p2[0:0] == 1'b1) ? tmp_3_fu_1577_p4 : shl_ln388_fu_1571_p2);

assign select_ln388_fu_1529_p3 = ((icmp_ln388_fu_1509_p2[0:0] == 1'b1) ? zext_ln388_fu_1515_p1 : zext_ln388_1_fu_1519_p1);

assign select_ln5_fu_839_p3 = ((icmp_ln5_1_fu_834_p2[0:0] == 1'b1) ? 6'd16 : 6'd24);

assign select_ln708_1_fu_770_p3 = ((icmp_ln708_fu_721_p2[0:0] == 1'b1) ? tmp_fu_735_p4 : data256_V_reg_1673);

assign select_ln708_2_fu_777_p3 = ((icmp_ln708_fu_721_p2[0:0] == 1'b1) ? xor_ln708_fu_750_p2 : zext_ln708_fu_727_p1);

assign select_ln708_3_fu_941_p3 = ((icmp_ln708_1_fu_900_p2[0:0] == 1'b1) ? sub_ln708_3_fu_923_p2 : sub_ln708_4_fu_935_p2);

assign select_ln708_4_fu_949_p3 = ((icmp_ln708_1_fu_900_p2[0:0] == 1'b1) ? tmp_1_fu_914_p4 : key256);

assign select_ln708_5_fu_956_p3 = ((icmp_ln708_1_fu_900_p2[0:0] == 1'b1) ? xor_ln708_1_fu_929_p2 : zext_ln708_4_fu_906_p1);

assign select_ln708_fu_762_p3 = ((icmp_ln708_fu_721_p2[0:0] == 1'b1) ? sub_ln708_fu_744_p2 : sub_ln708_1_fu_756_p2);

assign select_ln82_10_fu_650_p3 = ((or_ln82_5_fu_613_p2[0:0] == 1'b1) ? select_ln82_9_fu_642_p3 : select_ln82_8_fu_634_p3);

assign select_ln82_11_fu_658_p3 = ((icmp_ln82_5_fu_577_p2[0:0] == 1'b1) ? 6'd24 : 6'd32);

assign select_ln82_12_fu_666_p3 = ((or_ln82_4_fu_590_p2[0:0] == 1'b1) ? select_ln82_11_fu_658_p3 : 6'd16);

assign select_ln82_1_fu_537_p3 = ((or_ln82_fu_533_p2[0:0] == 1'b1) ? select_ln82_fu_526_p3 : 9'd192);

assign select_ln82_2_fu_555_p3 = ((icmp_ln82_3_fu_550_p2[0:0] == 1'b1) ? 9'd192 : 9'd256);

assign select_ln82_3_fu_569_p3 = ((or_ln82_1_fu_563_p2[0:0] == 1'b1) ? select_ln82_2_fu_555_p3 : 9'd128);

assign select_ln82_4_fu_582_p3 = ((icmp_ln82_5_fu_577_p2[0:0] == 1'b1) ? 9'd192 : 9'd256);

assign select_ln82_5_fu_595_p3 = ((or_ln82_4_fu_590_p2[0:0] == 1'b1) ? select_ln82_4_fu_582_p3 : 9'd128);

assign select_ln82_6_fu_619_p3 = ((or_ln82_5_fu_613_p2[0:0] == 1'b1) ? 9'd192 : select_ln82_5_fu_595_p3);

assign select_ln82_7_fu_627_p3 = ((or_ln82_3_reg_1658[0:0] == 1'b1) ? select_ln82_1_fu_537_p3 : select_ln82_3_fu_569_p3);

assign select_ln82_8_fu_634_p3 = ((icmp_ln82_5_fu_577_p2[0:0] == 1'b1) ? 9'd256 : select_ln82_7_fu_627_p3);

assign select_ln82_9_fu_642_p3 = ((icmp_ln82_7_fu_608_p2[0:0] == 1'b1) ? 9'd128 : 9'd192);

assign select_ln82_fu_526_p3 = ((icmp_ln82_1_reg_1652[0:0] == 1'b1) ? 9'd128 : 9'd256);

assign select_ln8_1_fu_1247_p3 = ((or_ln8_reg_1787[0:0] == 1'b1) ? 4'd6 : 4'd8);

assign select_ln8_fu_1045_p3 = ((or_ln8_fu_1041_p2[0:0] == 1'b1) ? select_ln136_2_fu_1022_p3 : round_val_fu_1033_p3);

assign sext_ln27_fu_1121_p1 = $signed(xor_ln27_2_fu_1115_p2);

assign shl_ln17_1_fu_886_p3 = {{empty_25_fu_882_p1}, {3'd0}};

assign shl_ln26_1_fu_1319_p3 = {{trunc_ln26_1_fu_1315_p1}, {2'd0}};

assign shl_ln2_fu_1134_p3 = {{trunc_ln26_fu_1130_p1}, {2'd0}};

assign shl_ln388_1_fu_1595_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 << zext_ln388_3_fu_1563_p1;

assign shl_ln388_fu_1571_p2 = zext_ln240_fu_1505_p1 << zext_ln388_2_fu_1559_p1;

assign shl_ln3_fu_1492_p3 = {{empty_32_reg_1991}, {3'd0}};

assign shl_ln_fu_707_p3 = {{empty_22_fu_703_p1}, {3'd0}};

assign statemt256_o = p_Val2_1_reg_435;

assign sub_i16_fu_865_p2 = ($signed(empty_23_fu_861_p1) + $signed(5'd31));

assign sub_i79_fu_1461_p2 = ($signed(empty_30_fu_1457_p1) + $signed(5'd31));

assign sub_i_fu_686_p2 = ($signed(empty_fu_682_p1) + $signed(5'd31));

assign sub_ln17_1_fu_980_p2 = (sub_i16_reg_1758 - empty_25_fu_882_p1);

assign sub_ln17_fu_801_p2 = (sub_i_reg_1724 - empty_22_fu_703_p1);

assign sub_ln37_fu_1482_p2 = (sub_i79_reg_1977 - empty_32_fu_1478_p1);

assign sub_ln708_1_fu_756_p2 = (zext_ln708_1_fu_731_p1 - zext_ln708_fu_727_p1);

assign sub_ln708_2_fu_785_p2 = (9'd255 - select_ln708_fu_762_p3);

assign sub_ln708_3_fu_923_p2 = (zext_ln708_4_fu_906_p1 - zext_ln708_5_fu_910_p1);

assign sub_ln708_4_fu_935_p2 = (zext_ln708_5_fu_910_p1 - zext_ln708_4_fu_906_p1);

assign sub_ln708_5_fu_964_p2 = (9'd255 - select_ln708_3_fu_941_p3);

assign sub_ln708_fu_744_p2 = (zext_ln708_fu_727_p1 - zext_ln708_1_fu_731_p1);

integer ap_tvar_int_0;

always @ (key256) begin
    for (ap_tvar_int_0 = 256 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 255 - 0) begin
            tmp_1_fu_914_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_914_p4[ap_tvar_int_0] = key256[255 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln388_fu_1571_p2) begin
    for (ap_tvar_int_1 = 256 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 255 - 0) begin
            tmp_3_fu_1577_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_3_fu_1577_p4[ap_tvar_int_1] = shl_ln388_fu_1571_p2[255 - ap_tvar_int_1];
        end
    end
end

assign tmp_4_fu_1162_p3 = {{60'd15}, {j_reg_389}};

integer ap_tvar_int_2;

always @ (data256_V_reg_1673) begin
    for (ap_tvar_int_2 = 256 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 255 - 0) begin
            tmp_fu_735_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_fu_735_p4[ap_tvar_int_2] = data256_V_reg_1673[255 - ap_tvar_int_2];
        end
    end
end

assign trunc_ln17_fu_820_p1 = p_Result_s_fu_815_p2[7:0];

assign trunc_ln26_1_fu_1315_p1 = j_2_reg_413[2:0];

assign trunc_ln26_fu_1130_p1 = j_reg_389[2:0];

assign xor_ln26_fu_1182_p2 = (word_q1 ^ statemt_q1);

assign xor_ln27_2_fu_1115_p2 = (j_reg_389 ^ 4'd8);

assign xor_ln27_fu_1188_p2 = (word_q0 ^ statemt_q0);

assign xor_ln388_1_fu_1553_p2 = (select_ln388_fu_1529_p3 ^ 9'd255);

assign xor_ln388_2_fu_1613_p2 = (256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 ^ and_ln388_fu_1607_p2);

assign xor_ln388_fu_1523_p2 = (zext_ln388_fu_1515_p1 ^ 9'd255);

assign xor_ln708_1_fu_929_p2 = (zext_ln708_4_fu_906_p1 ^ 9'd255);

assign xor_ln708_fu_750_p2 = (zext_ln708_fu_727_p1 ^ 9'd255);

assign zext_ln17_1_fu_1004_p1 = sub_ln17_1_reg_1782;

assign zext_ln17_fu_825_p1 = sub_ln17_reg_1748;

assign zext_ln240_fu_1505_p1 = statemt_q1;

assign zext_ln25_2_fu_1286_p1 = j_2_reg_413;

assign zext_ln25_fu_1232_p1 = add_ln167_fu_1227_p2;

assign zext_ln26_1_fu_1142_p1 = shl_ln2_fu_1134_p3;

assign zext_ln26_2_fu_1327_p1 = shl_ln26_1_fu_1319_p3;

assign zext_ln26_3_fu_1295_p1 = add_ln26_fu_1290_p2;

assign zext_ln26_4_fu_1158_p1 = j_reg_389;

assign zext_ln26_5_fu_1343_p1 = add_ln26_reg_1916;

assign zext_ln26_6_fu_1300_p1 = add_ln26_fu_1290_p2;

assign zext_ln26_fu_1110_p1 = j_reg_389;

assign zext_ln27_1_fu_1338_p1 = or_ln27_1_fu_1332_p2;

assign zext_ln27_2_fu_1125_p1 = $unsigned(sext_ln27_fu_1121_p1);

assign zext_ln27_3_fu_1310_p1 = add_ln27_fu_1304_p2;

assign zext_ln27_fu_1153_p1 = or_ln27_fu_1147_p2;

assign zext_ln28_1_fu_1373_p1 = or_ln28_1_fu_1368_p2;

assign zext_ln28_2_fu_1352_p1 = add_ln28_fu_1346_p2;

assign zext_ln28_fu_1199_p1 = or_ln28_fu_1194_p2;

assign zext_ln29_1_fu_1383_p1 = or_ln29_1_fu_1378_p2;

assign zext_ln29_2_fu_1177_p1 = add_ln29_fu_1171_p2;

assign zext_ln29_3_fu_1363_p1 = add_ln29_1_fu_1357_p2;

assign zext_ln29_fu_1209_p1 = or_ln29_fu_1204_p2;

assign zext_ln37_fu_1487_p1 = sub_ln37_fu_1482_p2;

assign zext_ln388_1_fu_1519_p1 = or_ln37_fu_1499_p2;

assign zext_ln388_2_fu_1559_p1 = select_ln388_2_fu_1545_p3;

assign zext_ln388_3_fu_1563_p1 = select_ln388_1_fu_1537_p3;

assign zext_ln388_4_fu_1567_p1 = xor_ln388_1_fu_1553_p2;

assign zext_ln388_fu_1515_p1 = shl_ln3_fu_1492_p3;

assign zext_ln708_1_fu_731_p1 = or_ln17_fu_715_p2;

assign zext_ln708_2_fu_791_p1 = select_ln708_2_fu_777_p3;

assign zext_ln708_3_fu_806_p1 = sub_ln708_2_reg_1738;

assign zext_ln708_4_fu_906_p1 = shl_ln17_1_fu_886_p3;

assign zext_ln708_5_fu_910_p1 = or_ln17_1_fu_894_p2;

assign zext_ln708_6_fu_970_p1 = select_ln708_5_fu_956_p3;

assign zext_ln708_7_fu_985_p1 = sub_ln708_5_reg_1772;

assign zext_ln708_fu_727_p1 = shl_ln_fu_707_p3;

assign zext_ln8_fu_1067_p1 = select_ln136_5_fu_1060_p3;

always @ (posedge ap_clk) begin
    select_ln82_6_reg_1707[5:0] <= 6'b000000;
    select_ln82_10_reg_1713[5:0] <= 6'b000000;
    round_reg_1719[2:0] <= 3'b000;
    sub_i_reg_1724[2:0] <= 3'b111;
    sub_ln708_2_reg_1738[0] <= 1'b0;
    round_1_reg_1753[2:0] <= 3'b000;
    sub_i16_reg_1758[2:0] <= 3'b111;
    sub_ln708_5_reg_1772[0] <= 1'b0;
    select_ln136_5_reg_1793[0] <= 1'b0;
    zext_ln8_reg_1798[0] <= 1'b0;
    zext_ln8_reg_1798[3] <= 1'b0;
    select_ln136_6_reg_1803[0] <= 1'b0;
    nb_1_reg_1809[0] <= 1'b0;
    shl_ln2_reg_1832[1:0] <= 2'b00;
    statemt_addr_1_reg_1838[1:0] <= 2'b00;
    statemt_addr_2_reg_1844[1:0] <= 2'b01;
    statemt_addr_3_reg_1870[1:0] <= 2'b10;
    statemt_addr_4_reg_1875[1:0] <= 2'b11;
    add_reg_1880[0] <= 1'b1;
    add_reg_1880[3] <= 1'b1;
    zext_ln25_reg_1885[0] <= 1'b0;
    zext_ln25_reg_1885[6:4] <= 3'b000;
    nb_2_reg_1898[0] <= 1'b0;
    shl_ln26_1_reg_1931[1:0] <= 2'b00;
    statemt_addr_5_reg_1937[1:0] <= 2'b00;
    statemt_addr_6_reg_1942[1:0] <= 2'b01;
    statemt_addr_7_reg_1957[1:0] <= 2'b10;
    statemt_addr_8_reg_1962[1:0] <= 2'b11;
    round_2_reg_1972[2:0] <= 3'b000;
    sub_i79_reg_1977[2:0] <= 3'b111;
end

endmodule //aes_encrypt
