-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_encrypt_MixColumn_AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    nb : IN STD_LOGIC_VECTOR (3 downto 0);
    n : IN STD_LOGIC_VECTOR (3 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes_encrypt_MixColumn_AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_272 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul54_fu_291_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul54_reg_783 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_788 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln228_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_reg_793_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_316_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_797 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln231_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_reg_803 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_reg_813 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln242_fu_340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln242_reg_823 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_6_reg_838 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal x_reg_848 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln242_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_reg_858 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_1_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_1_reg_868 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_load_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal word_load_8_reg_893 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_2_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_2_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_reg_903 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_6_fu_718_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_908 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln281_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln8_fu_733_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln8_reg_917 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln282_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_923 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln283_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln283_reg_933 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln284_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln284_reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal zext_ln285_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln285_reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ret_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_ce0 : STD_LOGIC;
    signal ret_we0 : STD_LOGIC;
    signal ret_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_ce1 : STD_LOGIC;
    signal ret_we1 : STD_LOGIC;
    signal ret_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_j_phi_fu_265_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_5_phi_fu_276_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln242_2_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln266_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln279_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal xor_ln242_2_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln254_2_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul54_fu_291_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul54_fu_291_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln231_fu_312_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln235_fu_329_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln228_fu_308_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln242_4_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln254_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln242_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln242_1_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln242_3_fu_385_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln266_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln279_fu_399_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln231_fu_410_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln233_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln236_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln219_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln238_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln232_fu_428_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_1_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln242_3_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln247_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln249_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln219_1_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln251_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln254_fu_546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln246_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln254_1_fu_550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln254_3_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_3_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_569_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln259_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln261_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln219_2_fu_597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln263_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_fu_625_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln258_fu_583_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_1_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln266_3_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_5_fu_617_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln219_3_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln275_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln279_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_7_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln279_1_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln278_1_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln270_fu_661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln282_fu_729_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln283_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln284_fu_757_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln285_fu_767_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul54_fu_291_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul54_fu_291_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component aes_encrypt_mul_4ns_4ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component aes_encrypt_MixColumn_AddRoundKey_ret IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ret_U : component aes_encrypt_MixColumn_AddRoundKey_ret
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ret_address0,
        ce0 => ret_ce0,
        we0 => ret_we0,
        d0 => ret_d0,
        q0 => ret_q0,
        address1 => ret_address1,
        ce1 => ret_ce1,
        we1 => ret_we1,
        d1 => ret_d1,
        q1 => ret_q1);

    mul_4ns_4ns_7_1_1_U14 : component aes_encrypt_mul_4ns_4ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        din0 => mul54_fu_291_p0,
        din1 => mul54_fu_291_p1,
        dout => mul54_fu_291_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_5_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_5_reg_272 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln281_reg_913 = ap_const_lv1_0))) then 
                j_5_reg_272 <= j_6_reg_908;
            end if; 
        end if;
    end process;

    j_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_261 <= ap_const_lv4_0;
            elsif (((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_261 <= j_4_reg_788;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_303_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln242_reg_823 <= add_ln242_fu_340_p2;
                    shl_ln_reg_797(4 downto 2) <= shl_ln_fu_316_p3(4 downto 2);
                    zext_ln231_reg_803(4 downto 2) <= zext_ln231_fu_324_p1(4 downto 2);
                    zext_ln235_reg_813(4 downto 2) <= zext_ln235_fu_335_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln228_reg_793 <= icmp_ln228_fu_303_p2;
                icmp_ln228_reg_793_pp0_iter1_reg <= icmp_ln228_reg_793;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln281_reg_913 <= icmp_ln281_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_4_reg_788 <= j_4_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                j_6_reg_908 <= j_6_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mul54_reg_783 <= mul54_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln281_fu_724_p2 = ap_const_lv1_0))) then
                    shl_ln8_reg_917(4 downto 2) <= shl_ln8_fu_733_p3(4 downto 2);
                    zext_ln282_reg_923(4 downto 2) <= zext_ln282_fu_741_p1(4 downto 2);
                    zext_ln283_reg_933(4 downto 2) <= zext_ln283_fu_752_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                word_load_8_reg_893 <= word_q0;
                word_load_reg_888 <= word_q1;
                x_6_reg_838 <= statemt_q1;
                x_reg_848 <= statemt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                xor_ln266_2_reg_898 <= xor_ln266_2_fu_641_p2;
                xor_ln278_reg_903 <= xor_ln278_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln242_1_reg_868(4 downto 2) <= zext_ln242_1_fu_380_p1(4 downto 2);
                    zext_ln242_reg_858(4 downto 2) <= zext_ln242_fu_370_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln281_reg_913 = ap_const_lv1_0))) then
                    zext_ln284_reg_943(4 downto 2) <= zext_ln284_fu_762_p1(4 downto 2);
                    zext_ln285_reg_953(4 downto 2) <= zext_ln285_fu_772_p1(4 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_797(1 downto 0) <= "00";
    zext_ln231_reg_803(1 downto 0) <= "00";
    zext_ln231_reg_803(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln235_reg_813(1 downto 0) <= "01";
    zext_ln235_reg_813(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln242_reg_858(1 downto 0) <= "10";
    zext_ln242_reg_858(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln242_1_reg_868(1 downto 0) <= "11";
    zext_ln242_1_reg_868(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln8_reg_917(1 downto 0) <= "00";
    zext_ln282_reg_923(1 downto 0) <= "00";
    zext_ln282_reg_923(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln283_reg_933(1 downto 0) <= "01";
    zext_ln283_reg_933(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln284_reg_943(1 downto 0) <= "10";
    zext_ln284_reg_943(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln285_reg_953(1 downto 0) <= "11";
    zext_ln285_reg_953(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln228_fu_303_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp1_iter0, icmp_ln281_fu_724_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln228_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln228_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln281_fu_724_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln281_fu_724_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln242_fu_340_p2 <= std_logic_vector(unsigned(mul54_reg_783) + unsigned(zext_ln228_fu_308_p1));
    add_ln254_fu_354_p2 <= std_logic_vector(unsigned(zext_ln242_4_fu_350_p1) + unsigned(ap_const_lv8_78));
    add_ln266_fu_388_p2 <= std_logic_vector(unsigned(zext_ln242_3_fu_385_p1) + unsigned(ap_const_lv9_F0));
    add_ln279_fu_399_p2 <= std_logic_vector(unsigned(zext_ln242_3_fu_385_p1) + unsigned(ap_const_lv9_168));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln228_fu_303_p2)
    begin
        if ((icmp_ln228_fu_303_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln281_fu_724_p2)
    begin
        if ((icmp_ln281_fu_724_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_5_phi_fu_276_p4_assign_proc : process(j_5_reg_272, j_6_reg_908, ap_CS_fsm_pp1_stage0, icmp_ln281_reg_913, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln281_reg_913 = ap_const_lv1_0))) then 
            ap_phi_mux_j_5_phi_fu_276_p4 <= j_6_reg_908;
        else 
            ap_phi_mux_j_5_phi_fu_276_p4 <= j_5_reg_272;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_265_p4_assign_proc : process(j_reg_261, j_4_reg_788, ap_CS_fsm_pp0_stage0, icmp_ln228_reg_793, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_265_p4 <= j_4_reg_788;
        else 
            ap_phi_mux_j_phi_fu_265_p4 <= j_reg_261;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln228_fu_303_p2 <= "1" when (ap_phi_mux_j_phi_fu_265_p4 = nb) else "0";
    icmp_ln281_fu_724_p2 <= "1" when (ap_phi_mux_j_5_phi_fu_276_p4 = nb) else "0";
    j_4_fu_297_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_265_p4) + unsigned(ap_const_lv4_1));
    j_6_fu_718_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_5_phi_fu_276_p4) + unsigned(ap_const_lv4_1));
    mul54_fu_291_p0 <= mul54_fu_291_p00(4 - 1 downto 0);
    mul54_fu_291_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n),7));
    mul54_fu_291_p1 <= mul54_fu_291_p10(4 - 1 downto 0);
    mul54_fu_291_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nb),7));
    or_ln235_fu_329_p2 <= (shl_ln_fu_316_p3 or ap_const_lv5_1);
    or_ln242_1_fu_375_p2 <= (shl_ln_reg_797 or ap_const_lv5_3);
    or_ln242_fu_365_p2 <= (shl_ln_reg_797 or ap_const_lv5_2);
    or_ln283_fu_746_p2 <= (shl_ln8_fu_733_p3 or ap_const_lv5_1);
    or_ln284_fu_757_p2 <= (shl_ln8_reg_917 or ap_const_lv5_2);
    or_ln285_fu_767_p2 <= (shl_ln8_reg_917 or ap_const_lv5_3);

    ret_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln235_reg_813, ap_CS_fsm_pp0_stage1, zext_ln242_1_reg_868, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln283_fu_752_p1, ap_CS_fsm_pp1_stage1, zext_ln285_fu_772_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ret_address0 <= zext_ln285_fu_772_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ret_address0 <= zext_ln283_fu_752_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ret_address0 <= zext_ln242_1_reg_868(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ret_address0 <= zext_ln235_reg_813(5 - 1 downto 0);
        else 
            ret_address0 <= "XXXXX";
        end if; 
    end process;


    ret_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln231_reg_803, ap_CS_fsm_pp0_stage1, zext_ln242_reg_858, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln282_fu_741_p1, zext_ln284_fu_762_p1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ret_address1 <= zext_ln284_fu_762_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ret_address1 <= zext_ln282_fu_741_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ret_address1 <= zext_ln242_reg_858(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ret_address1 <= zext_ln231_reg_803(5 - 1 downto 0);
        else 
            ret_address1 <= "XXXXX";
        end if; 
    end process;


    ret_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ret_ce0 <= ap_const_logic_1;
        else 
            ret_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ret_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ret_ce1 <= ap_const_logic_1;
        else 
            ret_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ret_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, xor_ln278_reg_903, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, xor_ln254_2_fu_562_p2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ret_d0 <= xor_ln278_reg_903;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ret_d0 <= xor_ln254_2_fu_562_p2;
            else 
                ret_d0 <= "XXXXXXXX";
            end if;
        else 
            ret_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ret_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, xor_ln266_2_reg_898, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, xor_ln242_2_fu_484_p2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ret_d1 <= xor_ln266_2_reg_898;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ret_d1 <= xor_ln242_2_fu_484_p2;
            else 
                ret_d1 <= "XXXXXXXX";
            end if;
        else 
            ret_d1 <= "XXXXXXXX";
        end if; 
    end process;


    ret_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln228_reg_793, icmp_ln228_reg_793_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln228_reg_793_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ret_we0 <= ap_const_logic_1;
        else 
            ret_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ret_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln228_reg_793, icmp_ln228_reg_793_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln228_reg_793_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln228_reg_793 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            ret_we1 <= ap_const_logic_1;
        else 
            ret_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln232_fu_428_p3 <= 
        xor_ln233_fu_422_p2 when (tmp_fu_415_p3(0) = '1') else 
        shl_ln231_fu_410_p2;
    select_ln246_fu_504_p3 <= 
        xor_ln247_fu_498_p2 when (tmp_5_fu_491_p3(0) = '1') else 
        shl_ln236_fu_436_p2;
    select_ln258_fu_583_p3 <= 
        xor_ln259_fu_577_p2 when (tmp_7_fu_569_p3(0) = '1') else 
        shl_ln249_fu_512_p2;
    select_ln270_fu_661_p3 <= 
        xor_ln271_fu_655_p2 when (tmp_9_fu_647_p3(0) = '1') else 
        shl_ln261_fu_591_p2;
    shl_ln231_fu_410_p2 <= std_logic_vector(shift_left(unsigned(x_6_reg_838),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln236_fu_436_p2 <= std_logic_vector(shift_left(unsigned(x_reg_848),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln249_fu_512_p2 <= std_logic_vector(shift_left(unsigned(statemt_q1),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln261_fu_591_p2 <= std_logic_vector(shift_left(unsigned(statemt_q0),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln8_fu_733_p3 <= (trunc_ln282_fu_729_p1 & ap_const_lv2_0);
    shl_ln_fu_316_p3 <= (trunc_ln231_fu_312_p1 & ap_const_lv2_0);

    statemt_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln235_fu_335_p1, ap_CS_fsm_pp0_stage1, zext_ln242_1_fu_380_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln283_reg_933, ap_CS_fsm_pp1_stage1, zext_ln285_reg_953, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            statemt_address0 <= zext_ln285_reg_953(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            statemt_address0 <= zext_ln283_reg_933(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            statemt_address0 <= zext_ln242_1_fu_380_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            statemt_address0 <= zext_ln235_fu_335_p1(5 - 1 downto 0);
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln231_fu_324_p1, ap_CS_fsm_pp0_stage1, zext_ln242_fu_370_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln282_reg_923, zext_ln284_reg_943, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            statemt_address1 <= zext_ln284_reg_943(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            statemt_address1 <= zext_ln282_reg_923(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            statemt_address1 <= zext_ln242_fu_370_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            statemt_address1 <= zext_ln231_fu_324_p1(5 - 1 downto 0);
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            statemt_ce0 <= ap_const_logic_1;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            statemt_ce1 <= ap_const_logic_1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    statemt_d0 <= ret_q0;
    statemt_d1 <= ret_q1;

    statemt_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, icmp_ln281_reg_913, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln281_reg_913 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln281_reg_913 = ap_const_lv1_0)))) then 
            statemt_we0 <= ap_const_logic_1;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, icmp_ln281_reg_913, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln281_reg_913 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln281_reg_913 = ap_const_lv1_0)))) then 
            statemt_we1 <= ap_const_logic_1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_674_p3 <= x_6_reg_838(7 downto 7);
    tmp_4_fu_446_p3 <= x_reg_848(7 downto 7);
    tmp_5_fu_491_p3 <= x_reg_848(7 downto 7);
    tmp_6_fu_524_p3 <= statemt_q1(7 downto 7);
    tmp_7_fu_569_p3 <= statemt_q1(7 downto 7);
    tmp_8_fu_603_p3 <= statemt_q0(7 downto 7);
    tmp_9_fu_647_p3 <= statemt_q0(7 downto 7);
    tmp_fu_415_p3 <= x_6_reg_838(7 downto 7);
    trunc_ln231_fu_312_p1 <= ap_phi_mux_j_phi_fu_265_p4(3 - 1 downto 0);
    trunc_ln282_fu_729_p1 <= ap_phi_mux_j_5_phi_fu_276_p4(3 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln254_fu_360_p1, ap_block_pp0_stage1, zext_ln279_fu_405_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                word_address0 <= zext_ln279_fu_405_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                word_address0 <= zext_ln254_fu_360_p1(9 - 1 downto 0);
            else 
                word_address0 <= "XXXXXXXXX";
            end if;
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln242_2_fu_345_p1, ap_block_pp0_stage1, zext_ln266_fu_394_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                word_address1 <= zext_ln266_fu_394_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                word_address1 <= zext_ln242_2_fu_345_p1(9 - 1 downto 0);
            else 
                word_address1 <= "XXXXXXXXX";
            end if;
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_459_p3 <= 
        xor_ln238_fu_453_p2 when (tmp_4_fu_446_p3(0) = '1') else 
        xor_ln219_fu_441_p2;
    x_3_fu_538_p3 <= 
        xor_ln251_fu_532_p2 when (tmp_6_fu_524_p3(0) = '1') else 
        xor_ln219_1_fu_518_p2;
    x_5_fu_617_p3 <= 
        xor_ln263_fu_611_p2 when (tmp_8_fu_603_p3(0) = '1') else 
        xor_ln219_2_fu_597_p2;
    x_7_fu_687_p3 <= 
        xor_ln275_fu_681_p2 when (tmp_10_fu_674_p3(0) = '1') else 
        xor_ln219_3_fu_669_p2;
    xor_ln219_1_fu_518_p2 <= (statemt_q1 xor shl_ln249_fu_512_p2);
    xor_ln219_2_fu_597_p2 <= (statemt_q0 xor shl_ln261_fu_591_p2);
    xor_ln219_3_fu_669_p2 <= (x_6_reg_838 xor shl_ln231_fu_410_p2);
    xor_ln219_fu_441_p2 <= (x_reg_848 xor shl_ln236_fu_436_p2);
    xor_ln233_fu_422_p2 <= (shl_ln231_fu_410_p2 xor ap_const_lv8_1B);
    xor_ln238_fu_453_p2 <= (xor_ln219_fu_441_p2 xor ap_const_lv8_1B);
    xor_ln242_1_fu_472_p2 <= (xor_ln242_fu_467_p2 xor statemt_q0);
    xor_ln242_2_fu_484_p2 <= (xor_ln242_3_fu_478_p2 xor x_1_fu_459_p3);
    xor_ln242_3_fu_478_p2 <= (xor_ln242_1_fu_472_p2 xor select_ln232_fu_428_p3);
    xor_ln242_fu_467_p2 <= (word_load_reg_888 xor statemt_q1);
    xor_ln247_fu_498_p2 <= (shl_ln236_fu_436_p2 xor ap_const_lv8_1B);
    xor_ln251_fu_532_p2 <= (xor_ln219_1_fu_518_p2 xor ap_const_lv8_1B);
    xor_ln254_1_fu_550_p2 <= (xor_ln254_fu_546_p2 xor statemt_q0);
    xor_ln254_2_fu_562_p2 <= (xor_ln254_3_fu_556_p2 xor x_3_fu_538_p3);
    xor_ln254_3_fu_556_p2 <= (xor_ln254_1_fu_550_p2 xor select_ln246_fu_504_p3);
    xor_ln254_fu_546_p2 <= (x_6_reg_838 xor word_load_8_reg_893);
    xor_ln259_fu_577_p2 <= (shl_ln249_fu_512_p2 xor ap_const_lv8_1B);
    xor_ln263_fu_611_p2 <= (xor_ln219_2_fu_597_p2 xor ap_const_lv8_1B);
    xor_ln266_1_fu_630_p2 <= (xor_ln266_fu_625_p2 xor x_reg_848);
    xor_ln266_2_fu_641_p2 <= (xor_ln266_3_fu_635_p2 xor x_5_fu_617_p3);
    xor_ln266_3_fu_635_p2 <= (xor_ln266_1_fu_630_p2 xor select_ln258_fu_583_p3);
    xor_ln266_fu_625_p2 <= (x_6_reg_838 xor word_q1);
    xor_ln271_fu_655_p2 <= (shl_ln261_fu_591_p2 xor ap_const_lv8_1B);
    xor_ln275_fu_681_p2 <= (xor_ln219_3_fu_669_p2 xor ap_const_lv8_1B);
    xor_ln278_1_fu_706_p2 <= (xor_ln279_1_fu_700_p2 xor x_7_fu_687_p3);
    xor_ln278_fu_712_p2 <= (xor_ln278_1_fu_706_p2 xor select_ln270_fu_661_p3);
    xor_ln279_1_fu_700_p2 <= (xor_ln279_fu_695_p2 xor statemt_q1);
    xor_ln279_fu_695_p2 <= (x_reg_848 xor word_q0);
    zext_ln228_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_265_p4),7));
    zext_ln231_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_316_p3),64));
    zext_ln235_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln235_fu_329_p2),64));
    zext_ln242_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln242_1_fu_375_p2),64));
    zext_ln242_2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln242_fu_340_p2),64));
    zext_ln242_3_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln242_reg_823),9));
    zext_ln242_4_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln242_fu_340_p2),8));
    zext_ln242_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln242_fu_365_p2),64));
    zext_ln254_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln254_fu_354_p2),64));
    zext_ln266_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln266_fu_388_p2),64));
    zext_ln279_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln279_fu_399_p2),64));
    zext_ln282_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_733_p3),64));
    zext_ln283_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln283_fu_746_p2),64));
    zext_ln284_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln284_fu_757_p2),64));
    zext_ln285_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln285_fu_767_p2),64));
end behav;
